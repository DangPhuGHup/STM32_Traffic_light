
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003324  08003324  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003324  08003324  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800332c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000054  08003380  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003380  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086fc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd3  00000000  00000000  000287bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b4  00000000  00000000  0002aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ede  00000000  00000000  0002b67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4fd  00000000  00000000  0004255a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000825fd  00000000  00000000  0004fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027d8  00000000  00000000  000d2054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080032e8 	.word	0x080032e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080032e8 	.word	0x080032e8

0800014c <subkey>:
int keyReg2[NUMBER_of_BUTTONS] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyRegPrevious[NUMBER_of_BUTTONS] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int timer_keypress[NUMBER_of_BUTTONS] = {0 , 0, 0};
int button_flag[NUMBER_of_BUTTONS] = {0, 0, 0};

void subkey(int button_index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[button_index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subkey+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	2000007c 	.word	0x2000007c

0800016c <getKeyInput>:

void getKeyInput(){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_of_BUTTONS; i++){
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	e012      	b.n	800019e <getKeyInput+0x32>
		keyReg0[i] = keyReg1[i];
 8000178:	4a4b      	ldr	r2, [pc, #300]	; (80002a8 <getKeyInput+0x13c>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	494a      	ldr	r1, [pc, #296]	; (80002ac <getKeyInput+0x140>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 8000188:	4a49      	ldr	r2, [pc, #292]	; (80002b0 <getKeyInput+0x144>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	4945      	ldr	r1, [pc, #276]	; (80002a8 <getKeyInput+0x13c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUMBER_of_BUTTONS; i++){
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	dde9      	ble.n	8000178 <getKeyInput+0xc>
	}
	keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4842      	ldr	r0, [pc, #264]	; (80002b4 <getKeyInput+0x148>)
 80001aa:	f002 f86f 	bl	800228c <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b3f      	ldr	r3, [pc, #252]	; (80002b0 <getKeyInput+0x144>)
 80001b4:	601a      	str	r2, [r3, #0]
	keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ba:	483e      	ldr	r0, [pc, #248]	; (80002b4 <getKeyInput+0x148>)
 80001bc:	f002 f866 	bl	800228c <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b3a      	ldr	r3, [pc, #232]	; (80002b0 <getKeyInput+0x144>)
 80001c6:	605a      	str	r2, [r3, #4]
	keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001cc:	4839      	ldr	r0, [pc, #228]	; (80002b4 <getKeyInput+0x148>)
 80001ce:	f002 f85d 	bl	800228c <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b36      	ldr	r3, [pc, #216]	; (80002b0 <getKeyInput+0x144>)
 80001d8:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < NUMBER_of_BUTTONS; i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	603b      	str	r3, [r7, #0]
 80001de:	e05a      	b.n	8000296 <getKeyInput+0x12a>
	{
		if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])){  // bước chống nhiễu 20ms, vì hàm này
 80001e0:	4a32      	ldr	r2, [pc, #200]	; (80002ac <getKeyInput+0x140>)
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492f      	ldr	r1, [pc, #188]	; (80002a8 <getKeyInput+0x13c>)
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d14d      	bne.n	8000290 <getKeyInput+0x124>
 80001f4:	4a2c      	ldr	r2, [pc, #176]	; (80002a8 <getKeyInput+0x13c>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492c      	ldr	r1, [pc, #176]	; (80002b0 <getKeyInput+0x144>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d143      	bne.n	8000290 <getKeyInput+0x124>
				                                               // được gọi trong ngắt 10ms.
			if(keyRegPrevious[i] != keyReg2[i]){  // trạng thái nhấn rồi thả, không phải nhấn đè.
 8000208:	4a2b      	ldr	r2, [pc, #172]	; (80002b8 <getKeyInput+0x14c>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4927      	ldr	r1, [pc, #156]	; (80002b0 <getKeyInput+0x144>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d016      	beq.n	800024a <getKeyInput+0xde>
				keyRegPrevious[i] = keyReg2[i];   // đưa trạng thái cũ vào trạng thái đang nhấn mới.
 800021c:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <getKeyInput+0x144>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4924      	ldr	r1, [pc, #144]	; (80002b8 <getKeyInput+0x14c>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg2[i] == PRESSED_STATE) // cho biết là trong trường hợp đã nhấn
 800022c:	4a20      	ldr	r2, [pc, #128]	; (80002b0 <getKeyInput+0x144>)
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d12b      	bne.n	8000290 <getKeyInput+0x124>
				{
					subkey(i);              // thực hiện hàm tùy ý.
 8000238:	6838      	ldr	r0, [r7, #0]
 800023a:	f7ff ff87 	bl	800014c <subkey>
					timer_keypress[i] = 200;  // nhấn đề 2s mới chuyển sang trạng thái nhấn đè ở dưới.
 800023e:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <getKeyInput+0x150>)
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	21c8      	movs	r1, #200	; 0xc8
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000248:	e022      	b.n	8000290 <getKeyInput+0x124>
										   // thời gian để chuyển trạng thái sang nhấn đè.
				}
			}
			else{  // trạng thái nhấn đè hoặc lúc không nhấn
				if(keyReg2[i] == PRESSED_STATE){   // xac dinh no la trang thai nhan de
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x144>)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d117      	bne.n	8000286 <getKeyInput+0x11a>
					timer_keypress[i]--;
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <getKeyInput+0x150>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	1e5a      	subs	r2, r3, #1
 8000260:	4916      	ldr	r1, [pc, #88]	; (80002bc <getKeyInput+0x150>)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(timer_keypress[i] <= 0)     // da den luc thuc hien nhan de
 8000268:	4a14      	ldr	r2, [pc, #80]	; (80002bc <getKeyInput+0x150>)
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	dc0d      	bgt.n	8000290 <getKeyInput+0x124>
					{
						subkey(i);
 8000274:	6838      	ldr	r0, [r7, #0]
 8000276:	f7ff ff69 	bl	800014c <subkey>
						timer_keypress[i] = 50;   // thoi gian giua cac lenh thuc thi khi nhan de
 800027a:	4a10      	ldr	r2, [pc, #64]	; (80002bc <getKeyInput+0x150>)
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	2132      	movs	r1, #50	; 0x32
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000284:	e004      	b.n	8000290 <getKeyInput+0x124>
					}
				}
				else{
					timer_keypress[i] = 0;
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <getKeyInput+0x150>)
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2100      	movs	r1, #0
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMBER_of_BUTTONS; i++)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	dda1      	ble.n	80001e0 <getKeyInput+0x74>
				}
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000018 	.word	0x20000018
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000070 	.word	0x20000070

080002c0 <fsm_automatic_Run>:

int time_red_copy = 0;
int time_green_copy = 0; // chi lam vay de khai bao thoi
int time_yellow_copy = 0;

void fsm_automatic_Run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status){
 80002c4:	4bb0      	ldr	r3, [pc, #704]	; (8000588 <fsm_automatic_Run+0x2c8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	f200 837b 	bhi.w	80009c4 <fsm_automatic_Run+0x704>
 80002ce:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <fsm_automatic_Run+0x14>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	080002e9 	.word	0x080002e9
 80002d8:	0800031b 	.word	0x0800031b
 80002dc:	080004a5 	.word	0x080004a5
 80002e0:	08000671 	.word	0x08000671
 80002e4:	080007fb 	.word	0x080007fb
		  case INIT:
			  light_1(black);
 80002e8:	2003      	movs	r0, #3
 80002ea:	f001 fc05 	bl	8001af8 <light_1>
			  light_2(black);
 80002ee:	2003      	movs	r0, #3
 80002f0:	f001 fc5e 	bl	8001bb0 <light_2>
			  time_red_copy = led_auto_buffer[0];
 80002f4:	4ba5      	ldr	r3, [pc, #660]	; (800058c <fsm_automatic_Run+0x2cc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4aa5      	ldr	r2, [pc, #660]	; (8000590 <fsm_automatic_Run+0x2d0>)
 80002fa:	6013      	str	r3, [r2, #0]
			  time_green_copy = led_auto_buffer[1];
 80002fc:	4ba3      	ldr	r3, [pc, #652]	; (800058c <fsm_automatic_Run+0x2cc>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4aa4      	ldr	r2, [pc, #656]	; (8000594 <fsm_automatic_Run+0x2d4>)
 8000302:	6013      	str	r3, [r2, #0]
			  time_yellow_copy =led_auto_buffer[2];
 8000304:	4ba1      	ldr	r3, [pc, #644]	; (800058c <fsm_automatic_Run+0x2cc>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4aa3      	ldr	r2, [pc, #652]	; (8000598 <fsm_automatic_Run+0x2d8>)
 800030a:	6013      	str	r3, [r2, #0]
			  status = AUTO_RED_GREEN;
 800030c:	4b9e      	ldr	r3, [pc, #632]	; (8000588 <fsm_automatic_Run+0x2c8>)
 800030e:	2201      	movs	r2, #1
 8000310:	601a      	str	r2, [r3, #0]
			  setTimer_1s1(100);             // timer 1s
 8000312:	2064      	movs	r0, #100	; 0x64
 8000314:	f001 fae4 	bl	80018e0 <setTimer_1s1>
//			  setTimer_EN_GR1(freq1_led7);   // timer freg giua 2 con led7 cua 1 cum

			  break;
 8000318:	e355      	b.n	80009c6 <fsm_automatic_Run+0x706>
		  case AUTO_RED_GREEN:
			  if(timer_EN_GR1_flag == 1)
 800031a:	4ba0      	ldr	r3, [pc, #640]	; (800059c <fsm_automatic_Run+0x2dc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	f040 8087 	bne.w	8000432 <fsm_automatic_Run+0x172>
			  {
				  setTimer_EN_GR1(25);
 8000324:	2019      	movs	r0, #25
 8000326:	f001 faef 	bl	8001908 <setTimer_EN_GR1>
				  switch(led7_freq1){
 800032a:	4b9d      	ldr	r3, [pc, #628]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <fsm_automatic_Run+0x78>
 8000332:	2b01      	cmp	r3, #1
 8000334:	d020      	beq.n	8000378 <fsm_automatic_Run+0xb8>
 8000336:	e03a      	b.n	80003ae <fsm_automatic_Run+0xee>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033e:	4899      	ldr	r0, [pc, #612]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 8000340:	f001 ffbb 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034a:	4896      	ldr	r0, [pc, #600]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 800034c:	f001 ffb5 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_green_copy % 10);
 8000350:	4b90      	ldr	r3, [pc, #576]	; (8000594 <fsm_automatic_Run+0x2d4>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b94      	ldr	r3, [pc, #592]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 8000356:	fb83 1302 	smull	r1, r3, r3, r2
 800035a:	1099      	asrs	r1, r3, #2
 800035c:	17d3      	asrs	r3, r2, #31
 800035e:	1ac9      	subs	r1, r1, r3
 8000360:	460b      	mov	r3, r1
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	1ad1      	subs	r1, r2, r3
 800036a:	4608      	mov	r0, r1
 800036c:	f000 fe30 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 8000370:	4b8b      	ldr	r3, [pc, #556]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 8000372:	2201      	movs	r2, #1
 8000374:	601a      	str	r2, [r3, #0]
						break;
 8000376:	e01a      	b.n	80003ae <fsm_automatic_Run+0xee>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	4889      	ldr	r0, [pc, #548]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 8000380:	f001 ff9b 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	4886      	ldr	r0, [pc, #536]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 800038c:	f001 ff95 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_green_copy / 10);
 8000390:	4b80      	ldr	r3, [pc, #512]	; (8000594 <fsm_automatic_Run+0x2d4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a84      	ldr	r2, [pc, #528]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 8000396:	fb82 1203 	smull	r1, r2, r2, r3
 800039a:	1092      	asrs	r2, r2, #2
 800039c:	17db      	asrs	r3, r3, #31
 800039e:	1ad3      	subs	r3, r2, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fe15 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 80003a6:	4b7e      	ldr	r3, [pc, #504]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
						break;
 80003ac:	bf00      	nop
				  }
				  switch(led7_freq2){
 80003ae:	4b7f      	ldr	r3, [pc, #508]	; (80005ac <fsm_automatic_Run+0x2ec>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <fsm_automatic_Run+0xfc>
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d020      	beq.n	80003fc <fsm_automatic_Run+0x13c>
 80003ba:	e03a      	b.n	8000432 <fsm_automatic_Run+0x172>
					  case 0:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4878      	ldr	r0, [pc, #480]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 80003c4:	f001 ff79 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	4875      	ldr	r0, [pc, #468]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 80003d0:	f001 ff73 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_red_copy % 10);
 80003d4:	4b6e      	ldr	r3, [pc, #440]	; (8000590 <fsm_automatic_Run+0x2d0>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b73      	ldr	r3, [pc, #460]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 80003da:	fb83 1302 	smull	r1, r3, r3, r2
 80003de:	1099      	asrs	r1, r3, #2
 80003e0:	17d3      	asrs	r3, r2, #31
 80003e2:	1ac9      	subs	r1, r1, r3
 80003e4:	460b      	mov	r3, r1
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	1ad1      	subs	r1, r2, r3
 80003ee:	4608      	mov	r0, r1
 80003f0:	f000 ff88 	bl	8001304 <display_2>
						led7_freq2 = 1;
 80003f4:	4b6d      	ldr	r3, [pc, #436]	; (80005ac <fsm_automatic_Run+0x2ec>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
						break;
 80003fa:	e01a      	b.n	8000432 <fsm_automatic_Run+0x172>
					  case 1:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000402:	4868      	ldr	r0, [pc, #416]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 8000404:	f001 ff59 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040e:	4865      	ldr	r0, [pc, #404]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 8000410:	f001 ff53 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_red_copy / 10);
 8000414:	4b5e      	ldr	r3, [pc, #376]	; (8000590 <fsm_automatic_Run+0x2d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a63      	ldr	r2, [pc, #396]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	1092      	asrs	r2, r2, #2
 8000420:	17db      	asrs	r3, r3, #31
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 ff6d 	bl	8001304 <display_2>
						led7_freq2 = 0;
 800042a:	4b60      	ldr	r3, [pc, #384]	; (80005ac <fsm_automatic_Run+0x2ec>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
						break;
 8000430:	bf00      	nop
				  }
			  }
			  if(button_flag[0] == 1)
 8000432:	4b5f      	ldr	r3, [pc, #380]	; (80005b0 <fsm_automatic_Run+0x2f0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d111      	bne.n	800045e <fsm_automatic_Run+0x19e>
			  {
				  button_flag[0] = 0;
 800043a:	4b5d      	ldr	r3, [pc, #372]	; (80005b0 <fsm_automatic_Run+0x2f0>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
				  time_red_copy = led_auto_buffer[0];
 8000440:	4b52      	ldr	r3, [pc, #328]	; (800058c <fsm_automatic_Run+0x2cc>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a52      	ldr	r2, [pc, #328]	; (8000590 <fsm_automatic_Run+0x2d0>)
 8000446:	6013      	str	r3, [r2, #0]
				  time_green_copy = led_auto_buffer[1];
 8000448:	4b50      	ldr	r3, [pc, #320]	; (800058c <fsm_automatic_Run+0x2cc>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a51      	ldr	r2, [pc, #324]	; (8000594 <fsm_automatic_Run+0x2d4>)
 800044e:	6013      	str	r3, [r2, #0]
				  time_yellow_copy = led_auto_buffer[2];
 8000450:	4b4e      	ldr	r3, [pc, #312]	; (800058c <fsm_automatic_Run+0x2cc>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4a50      	ldr	r2, [pc, #320]	; (8000598 <fsm_automatic_Run+0x2d8>)
 8000456:	6013      	str	r3, [r2, #0]
				  status = INIT_MAN;
 8000458:	4b4b      	ldr	r3, [pc, #300]	; (8000588 <fsm_automatic_Run+0x2c8>)
 800045a:	220a      	movs	r2, #10
 800045c:	601a      	str	r2, [r3, #0]
			  }
			  if(timer1_1s_flag == 1)
 800045e:	4b55      	ldr	r3, [pc, #340]	; (80005b4 <fsm_automatic_Run+0x2f4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d117      	bne.n	8000496 <fsm_automatic_Run+0x1d6>
			  {
				  setTimer_1s1(100);
 8000466:	2064      	movs	r0, #100	; 0x64
 8000468:	f001 fa3a 	bl	80018e0 <setTimer_1s1>
				  time_green_copy--;
 800046c:	4b49      	ldr	r3, [pc, #292]	; (8000594 <fsm_automatic_Run+0x2d4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	4a48      	ldr	r2, [pc, #288]	; (8000594 <fsm_automatic_Run+0x2d4>)
 8000474:	6013      	str	r3, [r2, #0]
				  time_red_copy--;
 8000476:	4b46      	ldr	r3, [pc, #280]	; (8000590 <fsm_automatic_Run+0x2d0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a44      	ldr	r2, [pc, #272]	; (8000590 <fsm_automatic_Run+0x2d0>)
 800047e:	6013      	str	r3, [r2, #0]
				  if(time_green_copy <= 0)
 8000480:	4b44      	ldr	r3, [pc, #272]	; (8000594 <fsm_automatic_Run+0x2d4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dc06      	bgt.n	8000496 <fsm_automatic_Run+0x1d6>
				  {
					  time_green_copy = led_auto_buffer[1];
 8000488:	4b40      	ldr	r3, [pc, #256]	; (800058c <fsm_automatic_Run+0x2cc>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a41      	ldr	r2, [pc, #260]	; (8000594 <fsm_automatic_Run+0x2d4>)
 800048e:	6013      	str	r3, [r2, #0]
					  status = AUTO_RED_YELLOW;
 8000490:	4b3d      	ldr	r3, [pc, #244]	; (8000588 <fsm_automatic_Run+0x2c8>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
				  }
			  }
			  light_1(red);
 8000496:	2000      	movs	r0, #0
 8000498:	f001 fb2e 	bl	8001af8 <light_1>
			  light_2(green);
 800049c:	2001      	movs	r0, #1
 800049e:	f001 fb87 	bl	8001bb0 <light_2>
			  break;
 80004a2:	e290      	b.n	80009c6 <fsm_automatic_Run+0x706>
		  case AUTO_RED_YELLOW:
			  if(timer_EN_GR1_flag == 1)
 80004a4:	4b3d      	ldr	r3, [pc, #244]	; (800059c <fsm_automatic_Run+0x2dc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	f040 80a0 	bne.w	80005ee <fsm_automatic_Run+0x32e>
			  {
				  setTimer_EN_GR1(25);
 80004ae:	2019      	movs	r0, #25
 80004b0:	f001 fa2a 	bl	8001908 <setTimer_EN_GR1>
				  switch(led7_freq1){
 80004b4:	4b3a      	ldr	r3, [pc, #232]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <fsm_automatic_Run+0x202>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d020      	beq.n	8000502 <fsm_automatic_Run+0x242>
 80004c0:	e03a      	b.n	8000538 <fsm_automatic_Run+0x278>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c8:	4836      	ldr	r0, [pc, #216]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 80004ca:	f001 fef6 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d4:	4833      	ldr	r0, [pc, #204]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 80004d6:	f001 fef0 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_yellow_copy % 10);
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <fsm_automatic_Run+0x2d8>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 80004e0:	fb83 1302 	smull	r1, r3, r3, r2
 80004e4:	1099      	asrs	r1, r3, #2
 80004e6:	17d3      	asrs	r3, r2, #31
 80004e8:	1ac9      	subs	r1, r1, r3
 80004ea:	460b      	mov	r3, r1
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	440b      	add	r3, r1
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	1ad1      	subs	r1, r2, r3
 80004f4:	4608      	mov	r0, r1
 80004f6:	f000 fd6b 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
						break;
 8000500:	e01a      	b.n	8000538 <fsm_automatic_Run+0x278>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	4826      	ldr	r0, [pc, #152]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 800050a:	f001 fed6 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000514:	4823      	ldr	r0, [pc, #140]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 8000516:	f001 fed0 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_yellow_copy / 10);
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <fsm_automatic_Run+0x2d8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 8000520:	fb82 1203 	smull	r1, r2, r2, r3
 8000524:	1092      	asrs	r2, r2, #2
 8000526:	17db      	asrs	r3, r3, #31
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fd50 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <fsm_automatic_Run+0x2e0>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
						break;
 8000536:	bf00      	nop
				  }
				  switch(led7_freq2){
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <fsm_automatic_Run+0x2ec>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <fsm_automatic_Run+0x286>
 8000540:	2b01      	cmp	r3, #1
 8000542:	d039      	beq.n	80005b8 <fsm_automatic_Run+0x2f8>
 8000544:	e053      	b.n	80005ee <fsm_automatic_Run+0x32e>
					  case 0:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 800054e:	f001 feb4 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <fsm_automatic_Run+0x2e4>)
 800055a:	f001 feae 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_red_copy % 10);
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <fsm_automatic_Run+0x2d0>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <fsm_automatic_Run+0x2e8>)
 8000564:	fb83 1302 	smull	r1, r3, r3, r2
 8000568:	1099      	asrs	r1, r3, #2
 800056a:	17d3      	asrs	r3, r2, #31
 800056c:	1ac9      	subs	r1, r1, r3
 800056e:	460b      	mov	r3, r1
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	440b      	add	r3, r1
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	1ad1      	subs	r1, r2, r3
 8000578:	4608      	mov	r0, r1
 800057a:	f000 fec3 	bl	8001304 <display_2>
						led7_freq2 = 1;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <fsm_automatic_Run+0x2ec>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
						break;
 8000584:	e033      	b.n	80005ee <fsm_automatic_Run+0x32e>
 8000586:	bf00      	nop
 8000588:	200000a8 	.word	0x200000a8
 800058c:	20000030 	.word	0x20000030
 8000590:	20000090 	.word	0x20000090
 8000594:	20000094 	.word	0x20000094
 8000598:	20000098 	.word	0x20000098
 800059c:	20000040 	.word	0x20000040
 80005a0:	20000088 	.word	0x20000088
 80005a4:	40010800 	.word	0x40010800
 80005a8:	66666667 	.word	0x66666667
 80005ac:	2000008c 	.word	0x2000008c
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	200000f4 	.word	0x200000f4
					  case 1:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	48a6      	ldr	r0, [pc, #664]	; (8000858 <fsm_automatic_Run+0x598>)
 80005c0:	f001 fe7b 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ca:	48a3      	ldr	r0, [pc, #652]	; (8000858 <fsm_automatic_Run+0x598>)
 80005cc:	f001 fe75 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_red_copy / 10);
 80005d0:	4ba2      	ldr	r3, [pc, #648]	; (800085c <fsm_automatic_Run+0x59c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4aa2      	ldr	r2, [pc, #648]	; (8000860 <fsm_automatic_Run+0x5a0>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	1092      	asrs	r2, r2, #2
 80005dc:	17db      	asrs	r3, r3, #31
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fe8f 	bl	8001304 <display_2>
						led7_freq2 = 0;
 80005e6:	4b9f      	ldr	r3, [pc, #636]	; (8000864 <fsm_automatic_Run+0x5a4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
						break;
 80005ec:	bf00      	nop
				  }
			  }
			  if(button_flag[0] == 1)
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <fsm_automatic_Run+0x5a8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d111      	bne.n	800061a <fsm_automatic_Run+0x35a>
			  {
				  button_flag[0] = 0;
 80005f6:	4b9c      	ldr	r3, [pc, #624]	; (8000868 <fsm_automatic_Run+0x5a8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
				  time_red_copy = led_auto_buffer[0];
 80005fc:	4b9b      	ldr	r3, [pc, #620]	; (800086c <fsm_automatic_Run+0x5ac>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a96      	ldr	r2, [pc, #600]	; (800085c <fsm_automatic_Run+0x59c>)
 8000602:	6013      	str	r3, [r2, #0]
				  time_green_copy = led_auto_buffer[1];
 8000604:	4b99      	ldr	r3, [pc, #612]	; (800086c <fsm_automatic_Run+0x5ac>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4a99      	ldr	r2, [pc, #612]	; (8000870 <fsm_automatic_Run+0x5b0>)
 800060a:	6013      	str	r3, [r2, #0]
				  time_yellow_copy = led_auto_buffer[2];
 800060c:	4b97      	ldr	r3, [pc, #604]	; (800086c <fsm_automatic_Run+0x5ac>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a98      	ldr	r2, [pc, #608]	; (8000874 <fsm_automatic_Run+0x5b4>)
 8000612:	6013      	str	r3, [r2, #0]
				  status = INIT_MAN;
 8000614:	4b98      	ldr	r3, [pc, #608]	; (8000878 <fsm_automatic_Run+0x5b8>)
 8000616:	220a      	movs	r2, #10
 8000618:	601a      	str	r2, [r3, #0]
			  }
			  if(timer1_1s_flag == 1)
 800061a:	4b98      	ldr	r3, [pc, #608]	; (800087c <fsm_automatic_Run+0x5bc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d11f      	bne.n	8000662 <fsm_automatic_Run+0x3a2>
			  {
				  setTimer_1s1(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 f95c 	bl	80018e0 <setTimer_1s1>
				  time_yellow_copy--;
 8000628:	4b92      	ldr	r3, [pc, #584]	; (8000874 <fsm_automatic_Run+0x5b4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4a91      	ldr	r2, [pc, #580]	; (8000874 <fsm_automatic_Run+0x5b4>)
 8000630:	6013      	str	r3, [r2, #0]
				  time_red_copy--;
 8000632:	4b8a      	ldr	r3, [pc, #552]	; (800085c <fsm_automatic_Run+0x59c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a88      	ldr	r2, [pc, #544]	; (800085c <fsm_automatic_Run+0x59c>)
 800063a:	6013      	str	r3, [r2, #0]
				  if(time_yellow_copy <= 0 || time_red_copy <= 0)
 800063c:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <fsm_automatic_Run+0x5b4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	dd03      	ble.n	800064c <fsm_automatic_Run+0x38c>
 8000644:	4b85      	ldr	r3, [pc, #532]	; (800085c <fsm_automatic_Run+0x59c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	dc0a      	bgt.n	8000662 <fsm_automatic_Run+0x3a2>
				  {
					  time_yellow_copy = led_auto_buffer[2];
 800064c:	4b87      	ldr	r3, [pc, #540]	; (800086c <fsm_automatic_Run+0x5ac>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a88      	ldr	r2, [pc, #544]	; (8000874 <fsm_automatic_Run+0x5b4>)
 8000652:	6013      	str	r3, [r2, #0]
					  time_red_copy = led_auto_buffer[0];
 8000654:	4b85      	ldr	r3, [pc, #532]	; (800086c <fsm_automatic_Run+0x5ac>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a80      	ldr	r2, [pc, #512]	; (800085c <fsm_automatic_Run+0x59c>)
 800065a:	6013      	str	r3, [r2, #0]
					  status = AUTO_GREEN_RED;
 800065c:	4b86      	ldr	r3, [pc, #536]	; (8000878 <fsm_automatic_Run+0x5b8>)
 800065e:	2203      	movs	r2, #3
 8000660:	601a      	str	r2, [r3, #0]
				  }
			  }
			  light_1(red);
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fa48 	bl	8001af8 <light_1>
			  light_2(yellow);
 8000668:	2002      	movs	r0, #2
 800066a:	f001 faa1 	bl	8001bb0 <light_2>
			  break;
 800066e:	e1aa      	b.n	80009c6 <fsm_automatic_Run+0x706>
		  case AUTO_GREEN_RED:
			  if(timer_EN_GR1_flag == 1)
 8000670:	4b83      	ldr	r3, [pc, #524]	; (8000880 <fsm_automatic_Run+0x5c0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	f040 8087 	bne.w	8000788 <fsm_automatic_Run+0x4c8>
			  {
				  setTimer_EN_GR1(25);
 800067a:	2019      	movs	r0, #25
 800067c:	f001 f944 	bl	8001908 <setTimer_EN_GR1>
				  switch(led7_freq1){
 8000680:	4b80      	ldr	r3, [pc, #512]	; (8000884 <fsm_automatic_Run+0x5c4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <fsm_automatic_Run+0x3ce>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d020      	beq.n	80006ce <fsm_automatic_Run+0x40e>
 800068c:	e03a      	b.n	8000704 <fsm_automatic_Run+0x444>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	4870      	ldr	r0, [pc, #448]	; (8000858 <fsm_automatic_Run+0x598>)
 8000696:	f001 fe10 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	486d      	ldr	r0, [pc, #436]	; (8000858 <fsm_automatic_Run+0x598>)
 80006a2:	f001 fe0a 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_red_copy % 10);
 80006a6:	4b6d      	ldr	r3, [pc, #436]	; (800085c <fsm_automatic_Run+0x59c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b6d      	ldr	r3, [pc, #436]	; (8000860 <fsm_automatic_Run+0x5a0>)
 80006ac:	fb83 1302 	smull	r1, r3, r3, r2
 80006b0:	1099      	asrs	r1, r3, #2
 80006b2:	17d3      	asrs	r3, r2, #31
 80006b4:	1ac9      	subs	r1, r1, r3
 80006b6:	460b      	mov	r3, r1
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	1ad1      	subs	r1, r2, r3
 80006c0:	4608      	mov	r0, r1
 80006c2:	f000 fc85 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 80006c6:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <fsm_automatic_Run+0x5c4>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
						break;
 80006cc:	e01a      	b.n	8000704 <fsm_automatic_Run+0x444>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	4860      	ldr	r0, [pc, #384]	; (8000858 <fsm_automatic_Run+0x598>)
 80006d6:	f001 fdf0 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	485d      	ldr	r0, [pc, #372]	; (8000858 <fsm_automatic_Run+0x598>)
 80006e2:	f001 fdea 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_red_copy / 10);
 80006e6:	4b5d      	ldr	r3, [pc, #372]	; (800085c <fsm_automatic_Run+0x59c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <fsm_automatic_Run+0x5a0>)
 80006ec:	fb82 1203 	smull	r1, r2, r2, r3
 80006f0:	1092      	asrs	r2, r2, #2
 80006f2:	17db      	asrs	r3, r3, #31
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fc6a 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 80006fc:	4b61      	ldr	r3, [pc, #388]	; (8000884 <fsm_automatic_Run+0x5c4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
						break;
 8000702:	bf00      	nop
				  }
				  switch(led7_freq2){
 8000704:	4b57      	ldr	r3, [pc, #348]	; (8000864 <fsm_automatic_Run+0x5a4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <fsm_automatic_Run+0x452>
 800070c:	2b01      	cmp	r3, #1
 800070e:	d020      	beq.n	8000752 <fsm_automatic_Run+0x492>
 8000710:	e03a      	b.n	8000788 <fsm_automatic_Run+0x4c8>
					  case 0:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	484f      	ldr	r0, [pc, #316]	; (8000858 <fsm_automatic_Run+0x598>)
 800071a:	f001 fdce 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	484c      	ldr	r0, [pc, #304]	; (8000858 <fsm_automatic_Run+0x598>)
 8000726:	f001 fdc8 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_green_copy % 10);
 800072a:	4b51      	ldr	r3, [pc, #324]	; (8000870 <fsm_automatic_Run+0x5b0>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <fsm_automatic_Run+0x5a0>)
 8000730:	fb83 1302 	smull	r1, r3, r3, r2
 8000734:	1099      	asrs	r1, r3, #2
 8000736:	17d3      	asrs	r3, r2, #31
 8000738:	1ac9      	subs	r1, r1, r3
 800073a:	460b      	mov	r3, r1
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	1ad1      	subs	r1, r2, r3
 8000744:	4608      	mov	r0, r1
 8000746:	f000 fddd 	bl	8001304 <display_2>
						led7_freq2 = 1;
 800074a:	4b46      	ldr	r3, [pc, #280]	; (8000864 <fsm_automatic_Run+0x5a4>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
						break;
 8000750:	e01a      	b.n	8000788 <fsm_automatic_Run+0x4c8>
					  case 1:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	483f      	ldr	r0, [pc, #252]	; (8000858 <fsm_automatic_Run+0x598>)
 800075a:	f001 fdae 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	483c      	ldr	r0, [pc, #240]	; (8000858 <fsm_automatic_Run+0x598>)
 8000766:	f001 fda8 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_green_copy / 10);
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <fsm_automatic_Run+0x5b0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <fsm_automatic_Run+0x5a0>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	1092      	asrs	r2, r2, #2
 8000776:	17db      	asrs	r3, r3, #31
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fdc2 	bl	8001304 <display_2>
						led7_freq2 = 0;
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <fsm_automatic_Run+0x5a4>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
						break;
 8000786:	bf00      	nop
				  }
			  }
			  if(button_flag[0] == 1)
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <fsm_automatic_Run+0x5a8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d111      	bne.n	80007b4 <fsm_automatic_Run+0x4f4>
			  {
				  button_flag[0] = 0;
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <fsm_automatic_Run+0x5a8>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
				  time_red_copy = led_auto_buffer[0];
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <fsm_automatic_Run+0x5ac>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a30      	ldr	r2, [pc, #192]	; (800085c <fsm_automatic_Run+0x59c>)
 800079c:	6013      	str	r3, [r2, #0]
				  time_green_copy = led_auto_buffer[1];
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <fsm_automatic_Run+0x5ac>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <fsm_automatic_Run+0x5b0>)
 80007a4:	6013      	str	r3, [r2, #0]
				  time_yellow_copy = led_auto_buffer[2];
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <fsm_automatic_Run+0x5ac>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	4a32      	ldr	r2, [pc, #200]	; (8000874 <fsm_automatic_Run+0x5b4>)
 80007ac:	6013      	str	r3, [r2, #0]
				  status = INIT_MAN;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <fsm_automatic_Run+0x5b8>)
 80007b0:	220a      	movs	r2, #10
 80007b2:	601a      	str	r2, [r3, #0]
			  }
			  if(timer1_1s_flag == 1)
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <fsm_automatic_Run+0x5bc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d117      	bne.n	80007ec <fsm_automatic_Run+0x52c>
			  {
				  setTimer_1s1(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f001 f88f 	bl	80018e0 <setTimer_1s1>
				  time_red_copy--;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <fsm_automatic_Run+0x59c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	4a24      	ldr	r2, [pc, #144]	; (800085c <fsm_automatic_Run+0x59c>)
 80007ca:	6013      	str	r3, [r2, #0]
				  time_green_copy--;
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <fsm_automatic_Run+0x5b0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <fsm_automatic_Run+0x5b0>)
 80007d4:	6013      	str	r3, [r2, #0]
				  if(time_green_copy <= 0)
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <fsm_automatic_Run+0x5b0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dc06      	bgt.n	80007ec <fsm_automatic_Run+0x52c>
				  {
					  time_green_copy = led_auto_buffer[1];
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <fsm_automatic_Run+0x5ac>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <fsm_automatic_Run+0x5b0>)
 80007e4:	6013      	str	r3, [r2, #0]
					  status = AUTO_YELLOW_RED;
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <fsm_automatic_Run+0x5b8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	601a      	str	r2, [r3, #0]
				  }
			  }
			  light_1(green);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f001 f983 	bl	8001af8 <light_1>
			  light_2(red);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 f9dc 	bl	8001bb0 <light_2>
			  break;
 80007f8:	e0e5      	b.n	80009c6 <fsm_automatic_Run+0x706>
		  case AUTO_YELLOW_RED:
			  if(timer_EN_GR1_flag == 1)
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <fsm_automatic_Run+0x5c0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	f040 809f 	bne.w	8000942 <fsm_automatic_Run+0x682>
			  {
				  setTimer_EN_GR1(25);
 8000804:	2019      	movs	r0, #25
 8000806:	f001 f87f 	bl	8001908 <setTimer_EN_GR1>
				  switch(led7_freq1){
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <fsm_automatic_Run+0x5c4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <fsm_automatic_Run+0x558>
 8000812:	2b01      	cmp	r3, #1
 8000814:	d038      	beq.n	8000888 <fsm_automatic_Run+0x5c8>
 8000816:	e052      	b.n	80008be <fsm_automatic_Run+0x5fe>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <fsm_automatic_Run+0x598>)
 8000820:	f001 fd4b 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <fsm_automatic_Run+0x598>)
 800082c:	f001 fd45 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_red_copy % 10);
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <fsm_automatic_Run+0x59c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <fsm_automatic_Run+0x5a0>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1099      	asrs	r1, r3, #2
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad1      	subs	r1, r2, r3
 800084a:	4608      	mov	r0, r1
 800084c:	f000 fbc0 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <fsm_automatic_Run+0x5c4>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
						break;
 8000856:	e032      	b.n	80008be <fsm_automatic_Run+0x5fe>
 8000858:	40010800 	.word	0x40010800
 800085c:	20000090 	.word	0x20000090
 8000860:	66666667 	.word	0x66666667
 8000864:	2000008c 	.word	0x2000008c
 8000868:	2000007c 	.word	0x2000007c
 800086c:	20000030 	.word	0x20000030
 8000870:	20000094 	.word	0x20000094
 8000874:	20000098 	.word	0x20000098
 8000878:	200000a8 	.word	0x200000a8
 800087c:	200000f4 	.word	0x200000f4
 8000880:	20000040 	.word	0x20000040
 8000884:	20000088 	.word	0x20000088
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	484f      	ldr	r0, [pc, #316]	; (80009cc <fsm_automatic_Run+0x70c>)
 8000890:	f001 fd13 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	484c      	ldr	r0, [pc, #304]	; (80009cc <fsm_automatic_Run+0x70c>)
 800089c:	f001 fd0d 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(time_red_copy / 10);
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <fsm_automatic_Run+0x710>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <fsm_automatic_Run+0x714>)
 80008a6:	fb82 1203 	smull	r1, r2, r2, r3
 80008aa:	1092      	asrs	r2, r2, #2
 80008ac:	17db      	asrs	r3, r3, #31
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fb8d 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <fsm_automatic_Run+0x718>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
						break;
 80008bc:	bf00      	nop
				  }
				  switch(led7_freq2){
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <fsm_automatic_Run+0x71c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <fsm_automatic_Run+0x60c>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d020      	beq.n	800090c <fsm_automatic_Run+0x64c>
 80008ca:	e03a      	b.n	8000942 <fsm_automatic_Run+0x682>
					  case 0:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d2:	483e      	ldr	r0, [pc, #248]	; (80009cc <fsm_automatic_Run+0x70c>)
 80008d4:	f001 fcf1 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <fsm_automatic_Run+0x70c>)
 80008e0:	f001 fceb 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_yellow_copy % 10);
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <fsm_automatic_Run+0x720>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <fsm_automatic_Run+0x714>)
 80008ea:	fb83 1302 	smull	r1, r3, r3, r2
 80008ee:	1099      	asrs	r1, r3, #2
 80008f0:	17d3      	asrs	r3, r2, #31
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	460b      	mov	r3, r1
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	1ad1      	subs	r1, r2, r3
 80008fe:	4608      	mov	r0, r1
 8000900:	f000 fd00 	bl	8001304 <display_2>
						led7_freq2 = 1;
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <fsm_automatic_Run+0x71c>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
						break;
 800090a:	e01a      	b.n	8000942 <fsm_automatic_Run+0x682>
					  case 1:
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	482e      	ldr	r0, [pc, #184]	; (80009cc <fsm_automatic_Run+0x70c>)
 8000914:	f001 fcd1 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091e:	482b      	ldr	r0, [pc, #172]	; (80009cc <fsm_automatic_Run+0x70c>)
 8000920:	f001 fccb 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(time_yellow_copy / 10);
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <fsm_automatic_Run+0x720>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <fsm_automatic_Run+0x714>)
 800092a:	fb82 1203 	smull	r1, r2, r2, r3
 800092e:	1092      	asrs	r2, r2, #2
 8000930:	17db      	asrs	r3, r3, #31
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fce5 	bl	8001304 <display_2>
						led7_freq2 = 0;
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <fsm_automatic_Run+0x71c>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
						break;
 8000940:	bf00      	nop
				  }
			  }
			  if(button_flag[0] == 1)
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <fsm_automatic_Run+0x724>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d111      	bne.n	800096e <fsm_automatic_Run+0x6ae>
			  {
				  button_flag[0] = 0;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <fsm_automatic_Run+0x724>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
				  time_red_copy = led_auto_buffer[0];
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <fsm_automatic_Run+0x728>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <fsm_automatic_Run+0x710>)
 8000956:	6013      	str	r3, [r2, #0]
				  time_green_copy = led_auto_buffer[1];
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <fsm_automatic_Run+0x728>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4a23      	ldr	r2, [pc, #140]	; (80009ec <fsm_automatic_Run+0x72c>)
 800095e:	6013      	str	r3, [r2, #0]
				  time_yellow_copy = led_auto_buffer[2];
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <fsm_automatic_Run+0x728>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <fsm_automatic_Run+0x720>)
 8000966:	6013      	str	r3, [r2, #0]
				  status = INIT_MAN;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <fsm_automatic_Run+0x730>)
 800096a:	220a      	movs	r2, #10
 800096c:	601a      	str	r2, [r3, #0]
			  }
			  if(timer1_1s_flag == 1)
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <fsm_automatic_Run+0x734>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d11f      	bne.n	80009b6 <fsm_automatic_Run+0x6f6>
			  {
				  setTimer_1s1(100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f000 ffb2 	bl	80018e0 <setTimer_1s1>
				  time_red_copy--;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <fsm_automatic_Run+0x710>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <fsm_automatic_Run+0x710>)
 8000984:	6013      	str	r3, [r2, #0]
				  time_yellow_copy--;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <fsm_automatic_Run+0x720>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3b01      	subs	r3, #1
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <fsm_automatic_Run+0x720>)
 800098e:	6013      	str	r3, [r2, #0]
				  if(time_red_copy <= 0 || time_yellow_copy <= 0)
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <fsm_automatic_Run+0x710>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dd03      	ble.n	80009a0 <fsm_automatic_Run+0x6e0>
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <fsm_automatic_Run+0x720>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dc0a      	bgt.n	80009b6 <fsm_automatic_Run+0x6f6>
				  {
					  time_red_copy = led_auto_buffer[0];
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <fsm_automatic_Run+0x728>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <fsm_automatic_Run+0x710>)
 80009a6:	6013      	str	r3, [r2, #0]
					  time_yellow_copy = led_auto_buffer[2];
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <fsm_automatic_Run+0x728>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <fsm_automatic_Run+0x720>)
 80009ae:	6013      	str	r3, [r2, #0]
					  status = AUTO_RED_GREEN;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <fsm_automatic_Run+0x730>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
				  }
			  }
			  light_1(yellow);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f001 f89e 	bl	8001af8 <light_1>
			  light_2(red);
 80009bc:	2000      	movs	r0, #0
 80009be:	f001 f8f7 	bl	8001bb0 <light_2>
			  break;
 80009c2:	e000      	b.n	80009c6 <fsm_automatic_Run+0x706>
		  default:
			  break;
 80009c4:	bf00      	nop
	  }
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010800 	.word	0x40010800
 80009d0:	20000090 	.word	0x20000090
 80009d4:	66666667 	.word	0x66666667
 80009d8:	20000088 	.word	0x20000088
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	20000098 	.word	0x20000098
 80009e4:	2000007c 	.word	0x2000007c
 80009e8:	20000030 	.word	0x20000030
 80009ec:	20000094 	.word	0x20000094
 80009f0:	200000a8 	.word	0x200000a8
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <fsm_manual_Run>:
#include "fsm_manual.h"
int timered_manual = 0;
int timegreen_manual = 0;
int timeyellow_manual = 0;

void fsm_manual_Run(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	switch(status){
 80009fc:	4b7b      	ldr	r3, [pc, #492]	; (8000bec <fsm_manual_Run+0x1f4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b0a      	subs	r3, #10
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	f200 82d1 	bhi.w	8000faa <fsm_manual_Run+0x5b2>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <fsm_manual_Run+0x18>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000a4b 	.word	0x08000a4b
 8000a18:	08000dbf 	.word	0x08000dbf
 8000a1c:	08000c1d 	.word	0x08000c1d
		case INIT_MAN:
			timered_manual = led_auto_buffer[0];
 8000a20:	4b73      	ldr	r3, [pc, #460]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a73      	ldr	r2, [pc, #460]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000a26:	6013      	str	r3, [r2, #0]
			timegreen_manual = led_auto_buffer[1];
 8000a28:	4b71      	ldr	r3, [pc, #452]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a72      	ldr	r2, [pc, #456]	; (8000bf8 <fsm_manual_Run+0x200>)
 8000a2e:	6013      	str	r3, [r2, #0]
			timeyellow_manual = led_auto_buffer[2];
 8000a30:	4b6f      	ldr	r3, [pc, #444]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a71      	ldr	r2, [pc, #452]	; (8000bfc <fsm_manual_Run+0x204>)
 8000a36:	6013      	str	r3, [r2, #0]
			led7_freq1 = 0;
 8000a38:	4b71      	ldr	r3, [pc, #452]	; (8000c00 <fsm_manual_Run+0x208>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
			led7_freq2 = 0;
 8000a3e:	4b71      	ldr	r3, [pc, #452]	; (8000c04 <fsm_manual_Run+0x20c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000a44:	4b69      	ldr	r3, [pc, #420]	; (8000bec <fsm_manual_Run+0x1f4>)
 8000a46:	220b      	movs	r2, #11
 8000a48:	601a      	str	r2, [r3, #0]
		case MAN_RED:
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	486e      	ldr	r0, [pc, #440]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a50:	f001 fc33 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	486b      	ldr	r0, [pc, #428]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a5a:	f001 fc2e 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2108      	movs	r1, #8
 8000a62:	4869      	ldr	r0, [pc, #420]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a64:	f001 fc29 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4866      	ldr	r0, [pc, #408]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a6e:	f001 fc24 	bl	80022ba <HAL_GPIO_WritePin>
			if(timer_2hz_flag == 1)
 8000a72:	4b66      	ldr	r3, [pc, #408]	; (8000c0c <fsm_manual_Run+0x214>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10a      	bne.n	8000a90 <fsm_manual_Run+0x98>
			{
				setTimer_2hz(25);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f000 ff58 	bl	8001930 <setTimer_2hz>
				HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000a80:	2110      	movs	r1, #16
 8000a82:	4861      	ldr	r0, [pc, #388]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a84:	f001 fc31 	bl	80022ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	485f      	ldr	r0, [pc, #380]	; (8000c08 <fsm_manual_Run+0x210>)
 8000a8c:	f001 fc2d 	bl	80022ea <HAL_GPIO_TogglePin>
			}
			if(button_flag[0] == 1)
 8000a90:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <fsm_manual_Run+0x218>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <fsm_manual_Run+0xac>
			{
				button_flag[0] = 0;
 8000a98:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <fsm_manual_Run+0x218>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <fsm_manual_Run+0x1f4>)
 8000aa0:	220d      	movs	r2, #13
 8000aa2:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1] == 1)
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <fsm_manual_Run+0x218>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d10b      	bne.n	8000ac4 <fsm_manual_Run+0xcc>
			{
				button_flag[1] = 0;
 8000aac:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <fsm_manual_Run+0x218>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
				if(timered_manual < 99){
 8000ab2:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b62      	cmp	r3, #98	; 0x62
 8000ab8:	dc04      	bgt.n	8000ac4 <fsm_manual_Run+0xcc>
					timered_manual++;
 8000aba:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a4c      	ldr	r2, [pc, #304]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000ac2:	6013      	str	r3, [r2, #0]
				}
			}
			if(button_flag[2] == 1)
 8000ac4:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <fsm_manual_Run+0x218>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d117      	bne.n	8000afc <fsm_manual_Run+0x104>
			{
				button_flag[2] = 0;
 8000acc:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <fsm_manual_Run+0x218>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
				if(timered_manual == (timegreen_manual + timeyellow_manual))
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <fsm_manual_Run+0x200>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <fsm_manual_Run+0x204>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	441a      	add	r2, r3
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d10b      	bne.n	8000afc <fsm_manual_Run+0x104>
				{
					led_auto_buffer[0] = timered_manual;
 8000ae4:	4b43      	ldr	r3, [pc, #268]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000aea:	6013      	str	r3, [r2, #0]
					led_auto_buffer[1] = timegreen_manual;
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <fsm_manual_Run+0x200>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a3f      	ldr	r2, [pc, #252]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000af2:	6053      	str	r3, [r2, #4]
					led_auto_buffer[2] = timeyellow_manual;
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <fsm_manual_Run+0x204>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a3d      	ldr	r2, [pc, #244]	; (8000bf0 <fsm_manual_Run+0x1f8>)
 8000afa:	6093      	str	r3, [r2, #8]
				}
			}
			if(timer_EN_GR1_flag == 1)
 8000afc:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <fsm_manual_Run+0x21c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	f040 8254 	bne.w	8000fae <fsm_manual_Run+0x5b6>
			{
				setTimer_EN_GR1(25);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f000 fefe 	bl	8001908 <setTimer_EN_GR1>
				switch(led7_freq1){
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <fsm_manual_Run+0x208>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <fsm_manual_Run+0x122>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d020      	beq.n	8000b5a <fsm_manual_Run+0x162>
 8000b18:	e03a      	b.n	8000b90 <fsm_manual_Run+0x198>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4839      	ldr	r0, [pc, #228]	; (8000c08 <fsm_manual_Run+0x210>)
 8000b22:	f001 fbca 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	4836      	ldr	r0, [pc, #216]	; (8000c08 <fsm_manual_Run+0x210>)
 8000b2e:	f001 fbc4 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timered_manual % 10);
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <fsm_manual_Run+0x220>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	1099      	asrs	r1, r3, #2
 8000b3e:	17d3      	asrs	r3, r2, #31
 8000b40:	1ac9      	subs	r1, r1, r3
 8000b42:	460b      	mov	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	1ad1      	subs	r1, r2, r3
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	f000 fa3f 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <fsm_manual_Run+0x208>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
						break;
 8000b58:	e01a      	b.n	8000b90 <fsm_manual_Run+0x198>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4829      	ldr	r0, [pc, #164]	; (8000c08 <fsm_manual_Run+0x210>)
 8000b62:	f001 fbaa 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <fsm_manual_Run+0x210>)
 8000b6e:	f001 fba4 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timered_manual / 10);
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <fsm_manual_Run+0x1fc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <fsm_manual_Run+0x220>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1092      	asrs	r2, r2, #2
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fa24 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <fsm_manual_Run+0x208>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
						break;
 8000b8e:	bf00      	nop
				  }
				  switch(led7_freq2){
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <fsm_manual_Run+0x20c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <fsm_manual_Run+0x1a6>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d013      	beq.n	8000bc4 <fsm_manual_Run+0x1cc>
						display_2(0);
						led7_freq2 = 0;
						break;
				  }
			}
			break;
 8000b9c:	e207      	b.n	8000fae <fsm_manual_Run+0x5b6>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <fsm_manual_Run+0x210>)
 8000ba6:	f001 fb88 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb0:	4815      	ldr	r0, [pc, #84]	; (8000c08 <fsm_manual_Run+0x210>)
 8000bb2:	f001 fb82 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 fba4 	bl	8001304 <display_2>
						led7_freq2 = 1;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <fsm_manual_Run+0x20c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
						break;
 8000bc2:	e012      	b.n	8000bea <fsm_manual_Run+0x1f2>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	480f      	ldr	r0, [pc, #60]	; (8000c08 <fsm_manual_Run+0x210>)
 8000bcc:	f001 fb75 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <fsm_manual_Run+0x210>)
 8000bd8:	f001 fb6f 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 fb91 	bl	8001304 <display_2>
						led7_freq2 = 0;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <fsm_manual_Run+0x20c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
						break;
 8000be8:	bf00      	nop
			break;
 8000bea:	e1e0      	b.n	8000fae <fsm_manual_Run+0x5b6>
 8000bec:	200000a8 	.word	0x200000a8
 8000bf0:	20000030 	.word	0x20000030
 8000bf4:	2000009c 	.word	0x2000009c
 8000bf8:	200000a0 	.word	0x200000a0
 8000bfc:	200000a4 	.word	0x200000a4
 8000c00:	20000088 	.word	0x20000088
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	20000044 	.word	0x20000044
 8000c10:	2000007c 	.word	0x2000007c
 8000c14:	20000040 	.word	0x20000040
 8000c18:	66666667 	.word	0x66666667
		case MAN_YELLOW:
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2104      	movs	r1, #4
 8000c20:	48a1      	ldr	r0, [pc, #644]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c22:	f001 fb4a 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2120      	movs	r1, #32
 8000c2a:	489f      	ldr	r0, [pc, #636]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c2c:	f001 fb45 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	489c      	ldr	r0, [pc, #624]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c36:	f001 fb40 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	489a      	ldr	r0, [pc, #616]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c40:	f001 fb3b 	bl	80022ba <HAL_GPIO_WritePin>
			if(timer_2hz_flag == 1)
 8000c44:	4b99      	ldr	r3, [pc, #612]	; (8000eac <fsm_manual_Run+0x4b4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10a      	bne.n	8000c62 <fsm_manual_Run+0x26a>
			{
				setTimer_2hz(25);
 8000c4c:	2019      	movs	r0, #25
 8000c4e:	f000 fe6f 	bl	8001930 <setTimer_2hz>
				HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000c52:	2108      	movs	r1, #8
 8000c54:	4894      	ldr	r0, [pc, #592]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c56:	f001 fb48 	bl	80022ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	4892      	ldr	r0, [pc, #584]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000c5e:	f001 fb44 	bl	80022ea <HAL_GPIO_TogglePin>
			}
			if(button_flag[0] == 1)
 8000c62:	4b93      	ldr	r3, [pc, #588]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d105      	bne.n	8000c76 <fsm_manual_Run+0x27e>
			{
				button_flag[0] = 0;
 8000c6a:	4b91      	ldr	r3, [pc, #580]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 8000c70:	4b90      	ldr	r3, [pc, #576]	; (8000eb4 <fsm_manual_Run+0x4bc>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1] == 1)
 8000c76:	4b8e      	ldr	r3, [pc, #568]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d10b      	bne.n	8000c96 <fsm_manual_Run+0x29e>
			{
				button_flag[1] = 0;
 8000c7e:	4b8c      	ldr	r3, [pc, #560]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
				if(timeyellow_manual < 99){
 8000c84:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b62      	cmp	r3, #98	; 0x62
 8000c8a:	dc04      	bgt.n	8000c96 <fsm_manual_Run+0x29e>
					timeyellow_manual++;
 8000c8c:	4b8a      	ldr	r3, [pc, #552]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a89      	ldr	r2, [pc, #548]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000c94:	6013      	str	r3, [r2, #0]
				}
			}
			if(button_flag[2] == 1)
 8000c96:	4b86      	ldr	r3, [pc, #536]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d117      	bne.n	8000cce <fsm_manual_Run+0x2d6>
			{
				button_flag[2] = 0;
 8000c9e:	4b84      	ldr	r3, [pc, #528]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
				if(timered_manual == (timegreen_manual + timeyellow_manual))
 8000ca4:	4b85      	ldr	r3, [pc, #532]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b83      	ldr	r3, [pc, #524]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	441a      	add	r2, r3
 8000cae:	4b84      	ldr	r3, [pc, #528]	; (8000ec0 <fsm_manual_Run+0x4c8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d10b      	bne.n	8000cce <fsm_manual_Run+0x2d6>
				{
					led_auto_buffer[0] = timered_manual;
 8000cb6:	4b82      	ldr	r3, [pc, #520]	; (8000ec0 <fsm_manual_Run+0x4c8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a82      	ldr	r2, [pc, #520]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000cbc:	6013      	str	r3, [r2, #0]
					led_auto_buffer[1] = timegreen_manual;
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a80      	ldr	r2, [pc, #512]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000cc4:	6053      	str	r3, [r2, #4]
					led_auto_buffer[2] = timeyellow_manual;
 8000cc6:	4b7c      	ldr	r3, [pc, #496]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a7e      	ldr	r2, [pc, #504]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000ccc:	6093      	str	r3, [r2, #8]
				}
			}
			if(timer_EN_GR1_flag == 1)
 8000cce:	4b7e      	ldr	r3, [pc, #504]	; (8000ec8 <fsm_manual_Run+0x4d0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 816d 	bne.w	8000fb2 <fsm_manual_Run+0x5ba>
			{
				setTimer_EN_GR1(25);
 8000cd8:	2019      	movs	r0, #25
 8000cda:	f000 fe15 	bl	8001908 <setTimer_EN_GR1>
				switch(led7_freq1){
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <fsm_manual_Run+0x4d4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <fsm_manual_Run+0x2f4>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d020      	beq.n	8000d2c <fsm_manual_Run+0x334>
 8000cea:	e03a      	b.n	8000d62 <fsm_manual_Run+0x36a>
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	486d      	ldr	r0, [pc, #436]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000cf4:	f001 fae1 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfe:	486a      	ldr	r0, [pc, #424]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d00:	f001 fadb 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timeyellow_manual % 10);
 8000d04:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b71      	ldr	r3, [pc, #452]	; (8000ed0 <fsm_manual_Run+0x4d8>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1099      	asrs	r1, r3, #2
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	1ad1      	subs	r1, r2, r3
 8000d1e:	4608      	mov	r0, r1
 8000d20:	f000 f956 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 8000d24:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <fsm_manual_Run+0x4d4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
						break;
 8000d2a:	e01a      	b.n	8000d62 <fsm_manual_Run+0x36a>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d32:	485d      	ldr	r0, [pc, #372]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d34:	f001 fac1 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3e:	485a      	ldr	r0, [pc, #360]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d40:	f001 fabb 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timeyellow_manual / 10);
 8000d44:	4b5c      	ldr	r3, [pc, #368]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <fsm_manual_Run+0x4d8>)
 8000d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4e:	1092      	asrs	r2, r2, #2
 8000d50:	17db      	asrs	r3, r3, #31
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f93b 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <fsm_manual_Run+0x4d4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
						break;
 8000d60:	bf00      	nop
				  }
				  switch(led7_freq2){
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <fsm_manual_Run+0x4dc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <fsm_manual_Run+0x378>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d013      	beq.n	8000d96 <fsm_manual_Run+0x39e>
						display_2(0);
						led7_freq2 = 0;
						break;
				  }
			}
			break;
 8000d6e:	e120      	b.n	8000fb2 <fsm_manual_Run+0x5ba>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	484c      	ldr	r0, [pc, #304]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d78:	f001 fa9f 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d82:	4849      	ldr	r0, [pc, #292]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d84:	f001 fa99 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(2);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f000 fabb 	bl	8001304 <display_2>
						led7_freq2 = 1;
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <fsm_manual_Run+0x4dc>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
						break;
 8000d94:	e012      	b.n	8000dbc <fsm_manual_Run+0x3c4>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9c:	4842      	ldr	r0, [pc, #264]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000d9e:	f001 fa8c 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da8:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000daa:	f001 fa86 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(0);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 faa8 	bl	8001304 <display_2>
						led7_freq2 = 0;
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <fsm_manual_Run+0x4dc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
						break;
 8000dba:	bf00      	nop
			break;
 8000dbc:	e0f9      	b.n	8000fb2 <fsm_manual_Run+0x5ba>
		case MAN_GREEN:
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4839      	ldr	r0, [pc, #228]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000dc4:	f001 fa79 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4836      	ldr	r0, [pc, #216]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000dce:	f001 fa74 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4834      	ldr	r0, [pc, #208]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000dd8:	f001 fa6f 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	4831      	ldr	r0, [pc, #196]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000de2:	f001 fa6a 	bl	80022ba <HAL_GPIO_WritePin>
			if(timer_2hz_flag == 1)
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <fsm_manual_Run+0x4b4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10a      	bne.n	8000e04 <fsm_manual_Run+0x40c>
			{
				setTimer_2hz(25);
 8000dee:	2019      	movs	r0, #25
 8000df0:	f000 fd9e 	bl	8001930 <setTimer_2hz>
				HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000df4:	2104      	movs	r1, #4
 8000df6:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000df8:	f001 fa77 	bl	80022ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <fsm_manual_Run+0x4b0>)
 8000e00:	f001 fa73 	bl	80022ea <HAL_GPIO_TogglePin>
			}
			if(button_flag[0] == 1)
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d111      	bne.n	8000e30 <fsm_manual_Run+0x438>
			{
				button_flag[0] = 0;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
				timered_manual = led_auto_buffer[0];
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <fsm_manual_Run+0x4c8>)
 8000e18:	6013      	str	r3, [r2, #0]
				timegreen_manual = led_auto_buffer[1];
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e20:	6013      	str	r3, [r2, #0]
				timeyellow_manual = led_auto_buffer[2];
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a24      	ldr	r2, [pc, #144]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000e28:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <fsm_manual_Run+0x4bc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1] == 1)
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10b      	bne.n	8000e50 <fsm_manual_Run+0x458>
			{
				button_flag[1] = 0;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
				if(timegreen_manual < 99){
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b62      	cmp	r3, #98	; 0x62
 8000e44:	dc04      	bgt.n	8000e50 <fsm_manual_Run+0x458>
					timegreen_manual++;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e4e:	6013      	str	r3, [r2, #0]
				}
			}
			if(button_flag[2] == 1)
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d117      	bne.n	8000e88 <fsm_manual_Run+0x490>
			{
				button_flag[2] = 0;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <fsm_manual_Run+0x4b8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
				if(timered_manual == (timegreen_manual + timeyellow_manual))
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	441a      	add	r2, r3
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <fsm_manual_Run+0x4c8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d10b      	bne.n	8000e88 <fsm_manual_Run+0x490>
				{
					led_auto_buffer[0] = timered_manual;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <fsm_manual_Run+0x4c8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e76:	6013      	str	r3, [r2, #0]
					led_auto_buffer[1] = timegreen_manual;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <fsm_manual_Run+0x4c4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e7e:	6053      	str	r3, [r2, #4]
					led_auto_buffer[2] = timeyellow_manual;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <fsm_manual_Run+0x4c0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <fsm_manual_Run+0x4cc>)
 8000e86:	6093      	str	r3, [r2, #8]
				}
			}
			if(timer_EN_GR1_flag == 1)
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <fsm_manual_Run+0x4d0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	f040 8092 	bne.w	8000fb6 <fsm_manual_Run+0x5be>
			{
				setTimer_EN_GR1(25);
 8000e92:	2019      	movs	r0, #25
 8000e94:	f000 fd38 	bl	8001908 <setTimer_EN_GR1>
				switch(led7_freq1){
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <fsm_manual_Run+0x4d4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <fsm_manual_Run+0x4e0>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d039      	beq.n	8000f18 <fsm_manual_Run+0x520>
 8000ea4:	e053      	b.n	8000f4e <fsm_manual_Run+0x556>
 8000ea6:	bf00      	nop
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	20000044 	.word	0x20000044
 8000eb0:	2000007c 	.word	0x2000007c
 8000eb4:	200000a8 	.word	0x200000a8
 8000eb8:	200000a4 	.word	0x200000a4
 8000ebc:	200000a0 	.word	0x200000a0
 8000ec0:	2000009c 	.word	0x2000009c
 8000ec4:	20000030 	.word	0x20000030
 8000ec8:	20000040 	.word	0x20000040
 8000ecc:	20000088 	.word	0x20000088
 8000ed0:	66666667 	.word	0x66666667
 8000ed4:	2000008c 	.word	0x2000008c
					  case 0:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	4837      	ldr	r0, [pc, #220]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000ee0:	f001 f9eb 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	4834      	ldr	r0, [pc, #208]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000eec:	f001 f9e5 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timegreen_manual % 10);
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <fsm_manual_Run+0x5c8>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <fsm_manual_Run+0x5cc>)
 8000ef6:	fb83 1302 	smull	r1, r3, r3, r2
 8000efa:	1099      	asrs	r1, r3, #2
 8000efc:	17d3      	asrs	r3, r2, #31
 8000efe:	1ac9      	subs	r1, r1, r3
 8000f00:	460b      	mov	r3, r1
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	1ad1      	subs	r1, r2, r3
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	f000 f860 	bl	8000fd0 <display_1>
						led7_freq1 = 1;
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <fsm_manual_Run+0x5d0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
						break;
 8000f16:	e01a      	b.n	8000f4e <fsm_manual_Run+0x556>
					  case 1:
						HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f20:	f001 f9cb 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	4824      	ldr	r0, [pc, #144]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f2c:	f001 f9c5 	bl	80022ba <HAL_GPIO_WritePin>
						display_1(timegreen_manual / 10);
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <fsm_manual_Run+0x5c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <fsm_manual_Run+0x5cc>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1092      	asrs	r2, r2, #2
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f845 	bl	8000fd0 <display_1>
						led7_freq1 = 0;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <fsm_manual_Run+0x5d0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
						break;
 8000f4c:	bf00      	nop
				  }
				  switch(led7_freq2){
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <fsm_manual_Run+0x5d4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <fsm_manual_Run+0x564>
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d013      	beq.n	8000f82 <fsm_manual_Run+0x58a>
						display_2(0);
						led7_freq2 = 0;
						break;
				  }
			}
			break;
 8000f5a:	e02c      	b.n	8000fb6 <fsm_manual_Run+0x5be>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f64:	f001 f9a9 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f70:	f001 f9a3 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(3);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f9c5 	bl	8001304 <display_2>
						led7_freq2 = 1;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <fsm_manual_Run+0x5d4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
						break;
 8000f80:	e012      	b.n	8000fa8 <fsm_manual_Run+0x5b0>
						HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f8a:	f001 f996 	bl	80022ba <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <fsm_manual_Run+0x5c4>)
 8000f96:	f001 f990 	bl	80022ba <HAL_GPIO_WritePin>
						display_2(0);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f9b2 	bl	8001304 <display_2>
						led7_freq2 = 0;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <fsm_manual_Run+0x5d4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
						break;
 8000fa6:	bf00      	nop
			break;
 8000fa8:	e005      	b.n	8000fb6 <fsm_manual_Run+0x5be>
		default:
			break;
 8000faa:	bf00      	nop
 8000fac:	e004      	b.n	8000fb8 <fsm_manual_Run+0x5c0>
			break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <fsm_manual_Run+0x5c0>
			break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <fsm_manual_Run+0x5c0>
			break;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	200000a0 	.word	0x200000a0
 8000fc4:	66666667 	.word	0x66666667
 8000fc8:	20000088 	.word	0x20000088
 8000fcc:	2000008c 	.word	0x2000008c

08000fd0 <display_1>:
 *      Author: Admin
 */
#include "led7_segment.h"

void display_1(int num)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	switch(num)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	f200 818a 	bhi.w	80012f4 <display_1+0x324>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <display_1+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	0800105b 	.word	0x0800105b
 8000ff0:	080010a5 	.word	0x080010a5
 8000ff4:	080010ef 	.word	0x080010ef
 8000ff8:	08001139 	.word	0x08001139
 8000ffc:	08001183 	.word	0x08001183
 8001000:	080011cd 	.word	0x080011cd
 8001004:	08001217 	.word	0x08001217
 8001008:	08001261 	.word	0x08001261
 800100c:	080012ab 	.word	0x080012ab
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2104      	movs	r1, #4
 8001014:	48ba      	ldr	r0, [pc, #744]	; (8001300 <display_1+0x330>)
 8001016:	f001 f950 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	48b8      	ldr	r0, [pc, #736]	; (8001300 <display_1+0x330>)
 8001020:	f001 f94b 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	48b5      	ldr	r0, [pc, #724]	; (8001300 <display_1+0x330>)
 800102a:	f001 f946 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2120      	movs	r1, #32
 8001032:	48b3      	ldr	r0, [pc, #716]	; (8001300 <display_1+0x330>)
 8001034:	f001 f941 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	48b0      	ldr	r0, [pc, #704]	; (8001300 <display_1+0x330>)
 800103e:	f001 f93c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	48ae      	ldr	r0, [pc, #696]	; (8001300 <display_1+0x330>)
 8001048:	f001 f937 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	48ab      	ldr	r0, [pc, #684]	; (8001300 <display_1+0x330>)
 8001054:	f001 f931 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001058:	e14d      	b.n	80012f6 <display_1+0x326>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2104      	movs	r1, #4
 800105e:	48a8      	ldr	r0, [pc, #672]	; (8001300 <display_1+0x330>)
 8001060:	f001 f92b 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	48a5      	ldr	r0, [pc, #660]	; (8001300 <display_1+0x330>)
 800106a:	f001 f926 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	48a3      	ldr	r0, [pc, #652]	; (8001300 <display_1+0x330>)
 8001074:	f001 f921 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	48a0      	ldr	r0, [pc, #640]	; (8001300 <display_1+0x330>)
 800107e:	f001 f91c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	489e      	ldr	r0, [pc, #632]	; (8001300 <display_1+0x330>)
 8001088:	f001 f917 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	489b      	ldr	r0, [pc, #620]	; (8001300 <display_1+0x330>)
 8001092:	f001 f912 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4898      	ldr	r0, [pc, #608]	; (8001300 <display_1+0x330>)
 800109e:	f001 f90c 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80010a2:	e128      	b.n	80012f6 <display_1+0x326>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2104      	movs	r1, #4
 80010a8:	4895      	ldr	r0, [pc, #596]	; (8001300 <display_1+0x330>)
 80010aa:	f001 f906 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	4893      	ldr	r0, [pc, #588]	; (8001300 <display_1+0x330>)
 80010b4:	f001 f901 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4890      	ldr	r0, [pc, #576]	; (8001300 <display_1+0x330>)
 80010be:	f001 f8fc 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2120      	movs	r1, #32
 80010c6:	488e      	ldr	r0, [pc, #568]	; (8001300 <display_1+0x330>)
 80010c8:	f001 f8f7 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	488b      	ldr	r0, [pc, #556]	; (8001300 <display_1+0x330>)
 80010d2:	f001 f8f2 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4889      	ldr	r0, [pc, #548]	; (8001300 <display_1+0x330>)
 80010dc:	f001 f8ed 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	4886      	ldr	r0, [pc, #536]	; (8001300 <display_1+0x330>)
 80010e8:	f001 f8e7 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80010ec:	e103      	b.n	80012f6 <display_1+0x326>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2104      	movs	r1, #4
 80010f2:	4883      	ldr	r0, [pc, #524]	; (8001300 <display_1+0x330>)
 80010f4:	f001 f8e1 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2108      	movs	r1, #8
 80010fc:	4880      	ldr	r0, [pc, #512]	; (8001300 <display_1+0x330>)
 80010fe:	f001 f8dc 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	487e      	ldr	r0, [pc, #504]	; (8001300 <display_1+0x330>)
 8001108:	f001 f8d7 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	487b      	ldr	r0, [pc, #492]	; (8001300 <display_1+0x330>)
 8001112:	f001 f8d2 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4879      	ldr	r0, [pc, #484]	; (8001300 <display_1+0x330>)
 800111c:	f001 f8cd 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	4876      	ldr	r0, [pc, #472]	; (8001300 <display_1+0x330>)
 8001126:	f001 f8c8 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001130:	4873      	ldr	r0, [pc, #460]	; (8001300 <display_1+0x330>)
 8001132:	f001 f8c2 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001136:	e0de      	b.n	80012f6 <display_1+0x326>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2104      	movs	r1, #4
 800113c:	4870      	ldr	r0, [pc, #448]	; (8001300 <display_1+0x330>)
 800113e:	f001 f8bc 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2108      	movs	r1, #8
 8001146:	486e      	ldr	r0, [pc, #440]	; (8001300 <display_1+0x330>)
 8001148:	f001 f8b7 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2110      	movs	r1, #16
 8001150:	486b      	ldr	r0, [pc, #428]	; (8001300 <display_1+0x330>)
 8001152:	f001 f8b2 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2120      	movs	r1, #32
 800115a:	4869      	ldr	r0, [pc, #420]	; (8001300 <display_1+0x330>)
 800115c:	f001 f8ad 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	4866      	ldr	r0, [pc, #408]	; (8001300 <display_1+0x330>)
 8001166:	f001 f8a8 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4864      	ldr	r0, [pc, #400]	; (8001300 <display_1+0x330>)
 8001170:	f001 f8a3 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	4861      	ldr	r0, [pc, #388]	; (8001300 <display_1+0x330>)
 800117c:	f001 f89d 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001180:	e0b9      	b.n	80012f6 <display_1+0x326>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2104      	movs	r1, #4
 8001186:	485e      	ldr	r0, [pc, #376]	; (8001300 <display_1+0x330>)
 8001188:	f001 f897 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2108      	movs	r1, #8
 8001190:	485b      	ldr	r0, [pc, #364]	; (8001300 <display_1+0x330>)
 8001192:	f001 f892 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	4859      	ldr	r0, [pc, #356]	; (8001300 <display_1+0x330>)
 800119c:	f001 f88d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4856      	ldr	r0, [pc, #344]	; (8001300 <display_1+0x330>)
 80011a6:	f001 f888 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4854      	ldr	r0, [pc, #336]	; (8001300 <display_1+0x330>)
 80011b0:	f001 f883 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4851      	ldr	r0, [pc, #324]	; (8001300 <display_1+0x330>)
 80011ba:	f001 f87e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c4:	484e      	ldr	r0, [pc, #312]	; (8001300 <display_1+0x330>)
 80011c6:	f001 f878 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80011ca:	e094      	b.n	80012f6 <display_1+0x326>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	484b      	ldr	r0, [pc, #300]	; (8001300 <display_1+0x330>)
 80011d2:	f001 f872 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2108      	movs	r1, #8
 80011da:	4849      	ldr	r0, [pc, #292]	; (8001300 <display_1+0x330>)
 80011dc:	f001 f86d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2110      	movs	r1, #16
 80011e4:	4846      	ldr	r0, [pc, #280]	; (8001300 <display_1+0x330>)
 80011e6:	f001 f868 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	4844      	ldr	r0, [pc, #272]	; (8001300 <display_1+0x330>)
 80011f0:	f001 f863 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2140      	movs	r1, #64	; 0x40
 80011f8:	4841      	ldr	r0, [pc, #260]	; (8001300 <display_1+0x330>)
 80011fa:	f001 f85e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	483f      	ldr	r0, [pc, #252]	; (8001300 <display_1+0x330>)
 8001204:	f001 f859 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120e:	483c      	ldr	r0, [pc, #240]	; (8001300 <display_1+0x330>)
 8001210:	f001 f853 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001214:	e06f      	b.n	80012f6 <display_1+0x326>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2104      	movs	r1, #4
 800121a:	4839      	ldr	r0, [pc, #228]	; (8001300 <display_1+0x330>)
 800121c:	f001 f84d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2108      	movs	r1, #8
 8001224:	4836      	ldr	r0, [pc, #216]	; (8001300 <display_1+0x330>)
 8001226:	f001 f848 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	4834      	ldr	r0, [pc, #208]	; (8001300 <display_1+0x330>)
 8001230:	f001 f843 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2120      	movs	r1, #32
 8001238:	4831      	ldr	r0, [pc, #196]	; (8001300 <display_1+0x330>)
 800123a:	f001 f83e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2140      	movs	r1, #64	; 0x40
 8001242:	482f      	ldr	r0, [pc, #188]	; (8001300 <display_1+0x330>)
 8001244:	f001 f839 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	482c      	ldr	r0, [pc, #176]	; (8001300 <display_1+0x330>)
 800124e:	f001 f834 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001258:	4829      	ldr	r0, [pc, #164]	; (8001300 <display_1+0x330>)
 800125a:	f001 f82e 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 800125e:	e04a      	b.n	80012f6 <display_1+0x326>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2104      	movs	r1, #4
 8001264:	4826      	ldr	r0, [pc, #152]	; (8001300 <display_1+0x330>)
 8001266:	f001 f828 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2108      	movs	r1, #8
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <display_1+0x330>)
 8001270:	f001 f823 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2110      	movs	r1, #16
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <display_1+0x330>)
 800127a:	f001 f81e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <display_1+0x330>)
 8001284:	f001 f819 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	481c      	ldr	r0, [pc, #112]	; (8001300 <display_1+0x330>)
 800128e:	f001 f814 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	481a      	ldr	r0, [pc, #104]	; (8001300 <display_1+0x330>)
 8001298:	f001 f80f 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <display_1+0x330>)
 80012a4:	f001 f809 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80012a8:	e025      	b.n	80012f6 <display_1+0x326>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2104      	movs	r1, #4
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <display_1+0x330>)
 80012b0:	f001 f803 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <display_1+0x330>)
 80012ba:	f000 fffe 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <display_1+0x330>)
 80012c4:	f000 fff9 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2120      	movs	r1, #32
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <display_1+0x330>)
 80012ce:	f000 fff4 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	480a      	ldr	r0, [pc, #40]	; (8001300 <display_1+0x330>)
 80012d8:	f000 ffef 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <display_1+0x330>)
 80012e2:	f000 ffea 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <display_1+0x330>)
 80012ee:	f000 ffe4 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80012f2:	e000      	b.n	80012f6 <display_1+0x326>
		default:
				  break;
 80012f4:	bf00      	nop
	}
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40010c00 	.word	0x40010c00

08001304 <display_2>:
void display_2(int num)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	switch(num)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b09      	cmp	r3, #9
 8001310:	f200 81c8 	bhi.w	80016a4 <display_2+0x3a0>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <display_2+0x18>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	08001345 	.word	0x08001345
 8001320:	0800139b 	.word	0x0800139b
 8001324:	080013f1 	.word	0x080013f1
 8001328:	08001447 	.word	0x08001447
 800132c:	0800149d 	.word	0x0800149d
 8001330:	080014f3 	.word	0x080014f3
 8001334:	08001549 	.word	0x08001549
 8001338:	0800159f 	.word	0x0800159f
 800133c:	080015f5 	.word	0x080015f5
 8001340:	0800164b 	.word	0x0800164b
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134a:	48d5      	ldr	r0, [pc, #852]	; (80016a0 <display_2+0x39c>)
 800134c:	f000 ffb5 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001356:	48d2      	ldr	r0, [pc, #840]	; (80016a0 <display_2+0x39c>)
 8001358:	f000 ffaf 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	48cf      	ldr	r0, [pc, #828]	; (80016a0 <display_2+0x39c>)
 8001364:	f000 ffa9 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136e:	48cc      	ldr	r0, [pc, #816]	; (80016a0 <display_2+0x39c>)
 8001370:	f000 ffa3 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	48c9      	ldr	r0, [pc, #804]	; (80016a0 <display_2+0x39c>)
 800137c:	f000 ff9d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001386:	48c6      	ldr	r0, [pc, #792]	; (80016a0 <display_2+0x39c>)
 8001388:	f000 ff97 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001392:	48c3      	ldr	r0, [pc, #780]	; (80016a0 <display_2+0x39c>)
 8001394:	f000 ff91 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001398:	e185      	b.n	80016a6 <display_2+0x3a2>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	48bf      	ldr	r0, [pc, #764]	; (80016a0 <display_2+0x39c>)
 80013a2:	f000 ff8a 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	48bc      	ldr	r0, [pc, #752]	; (80016a0 <display_2+0x39c>)
 80013ae:	f000 ff84 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b8:	48b9      	ldr	r0, [pc, #740]	; (80016a0 <display_2+0x39c>)
 80013ba:	f000 ff7e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c4:	48b6      	ldr	r0, [pc, #728]	; (80016a0 <display_2+0x39c>)
 80013c6:	f000 ff78 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	48b3      	ldr	r0, [pc, #716]	; (80016a0 <display_2+0x39c>)
 80013d2:	f000 ff72 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013dc:	48b0      	ldr	r0, [pc, #704]	; (80016a0 <display_2+0x39c>)
 80013de:	f000 ff6c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e8:	48ad      	ldr	r0, [pc, #692]	; (80016a0 <display_2+0x39c>)
 80013ea:	f000 ff66 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80013ee:	e15a      	b.n	80016a6 <display_2+0x3a2>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	48aa      	ldr	r0, [pc, #680]	; (80016a0 <display_2+0x39c>)
 80013f8:	f000 ff5f 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	48a7      	ldr	r0, [pc, #668]	; (80016a0 <display_2+0x39c>)
 8001404:	f000 ff59 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140e:	48a4      	ldr	r0, [pc, #656]	; (80016a0 <display_2+0x39c>)
 8001410:	f000 ff53 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	48a1      	ldr	r0, [pc, #644]	; (80016a0 <display_2+0x39c>)
 800141c:	f000 ff4d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	489e      	ldr	r0, [pc, #632]	; (80016a0 <display_2+0x39c>)
 8001428:	f000 ff47 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	489b      	ldr	r0, [pc, #620]	; (80016a0 <display_2+0x39c>)
 8001434:	f000 ff41 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143e:	4898      	ldr	r0, [pc, #608]	; (80016a0 <display_2+0x39c>)
 8001440:	f000 ff3b 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001444:	e12f      	b.n	80016a6 <display_2+0x3a2>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144c:	4894      	ldr	r0, [pc, #592]	; (80016a0 <display_2+0x39c>)
 800144e:	f000 ff34 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	4891      	ldr	r0, [pc, #580]	; (80016a0 <display_2+0x39c>)
 800145a:	f000 ff2e 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001464:	488e      	ldr	r0, [pc, #568]	; (80016a0 <display_2+0x39c>)
 8001466:	f000 ff28 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001470:	488b      	ldr	r0, [pc, #556]	; (80016a0 <display_2+0x39c>)
 8001472:	f000 ff22 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147c:	4888      	ldr	r0, [pc, #544]	; (80016a0 <display_2+0x39c>)
 800147e:	f000 ff1c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4885      	ldr	r0, [pc, #532]	; (80016a0 <display_2+0x39c>)
 800148a:	f000 ff16 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001494:	4882      	ldr	r0, [pc, #520]	; (80016a0 <display_2+0x39c>)
 8001496:	f000 ff10 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 800149a:	e104      	b.n	80016a6 <display_2+0x3a2>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a2:	487f      	ldr	r0, [pc, #508]	; (80016a0 <display_2+0x39c>)
 80014a4:	f000 ff09 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	487c      	ldr	r0, [pc, #496]	; (80016a0 <display_2+0x39c>)
 80014b0:	f000 ff03 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	4879      	ldr	r0, [pc, #484]	; (80016a0 <display_2+0x39c>)
 80014bc:	f000 fefd 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4876      	ldr	r0, [pc, #472]	; (80016a0 <display_2+0x39c>)
 80014c8:	f000 fef7 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4873      	ldr	r0, [pc, #460]	; (80016a0 <display_2+0x39c>)
 80014d4:	f000 fef1 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014de:	4870      	ldr	r0, [pc, #448]	; (80016a0 <display_2+0x39c>)
 80014e0:	f000 feeb 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ea:	486d      	ldr	r0, [pc, #436]	; (80016a0 <display_2+0x39c>)
 80014ec:	f000 fee5 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80014f0:	e0d9      	b.n	80016a6 <display_2+0x3a2>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f8:	4869      	ldr	r0, [pc, #420]	; (80016a0 <display_2+0x39c>)
 80014fa:	f000 fede 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	4866      	ldr	r0, [pc, #408]	; (80016a0 <display_2+0x39c>)
 8001506:	f000 fed8 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001510:	4863      	ldr	r0, [pc, #396]	; (80016a0 <display_2+0x39c>)
 8001512:	f000 fed2 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <display_2+0x39c>)
 800151e:	f000 fecc 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001528:	485d      	ldr	r0, [pc, #372]	; (80016a0 <display_2+0x39c>)
 800152a:	f000 fec6 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001534:	485a      	ldr	r0, [pc, #360]	; (80016a0 <display_2+0x39c>)
 8001536:	f000 fec0 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001540:	4857      	ldr	r0, [pc, #348]	; (80016a0 <display_2+0x39c>)
 8001542:	f000 feba 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001546:	e0ae      	b.n	80016a6 <display_2+0x3a2>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154e:	4854      	ldr	r0, [pc, #336]	; (80016a0 <display_2+0x39c>)
 8001550:	f000 feb3 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	4851      	ldr	r0, [pc, #324]	; (80016a0 <display_2+0x39c>)
 800155c:	f000 fead 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001566:	484e      	ldr	r0, [pc, #312]	; (80016a0 <display_2+0x39c>)
 8001568:	f000 fea7 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001572:	484b      	ldr	r0, [pc, #300]	; (80016a0 <display_2+0x39c>)
 8001574:	f000 fea1 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	4848      	ldr	r0, [pc, #288]	; (80016a0 <display_2+0x39c>)
 8001580:	f000 fe9b 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158a:	4845      	ldr	r0, [pc, #276]	; (80016a0 <display_2+0x39c>)
 800158c:	f000 fe95 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001596:	4842      	ldr	r0, [pc, #264]	; (80016a0 <display_2+0x39c>)
 8001598:	f000 fe8f 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 800159c:	e083      	b.n	80016a6 <display_2+0x3a2>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a4:	483e      	ldr	r0, [pc, #248]	; (80016a0 <display_2+0x39c>)
 80015a6:	f000 fe88 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	483b      	ldr	r0, [pc, #236]	; (80016a0 <display_2+0x39c>)
 80015b2:	f000 fe82 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015bc:	4838      	ldr	r0, [pc, #224]	; (80016a0 <display_2+0x39c>)
 80015be:	f000 fe7c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c8:	4835      	ldr	r0, [pc, #212]	; (80016a0 <display_2+0x39c>)
 80015ca:	f000 fe76 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d4:	4832      	ldr	r0, [pc, #200]	; (80016a0 <display_2+0x39c>)
 80015d6:	f000 fe70 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <display_2+0x39c>)
 80015e2:	f000 fe6a 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <display_2+0x39c>)
 80015ee:	f000 fe64 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 80015f2:	e058      	b.n	80016a6 <display_2+0x3a2>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <display_2+0x39c>)
 80015fc:	f000 fe5d 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001606:	4826      	ldr	r0, [pc, #152]	; (80016a0 <display_2+0x39c>)
 8001608:	f000 fe57 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <display_2+0x39c>)
 8001614:	f000 fe51 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <display_2+0x39c>)
 8001620:	f000 fe4b 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <display_2+0x39c>)
 800162c:	f000 fe45 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001636:	481a      	ldr	r0, [pc, #104]	; (80016a0 <display_2+0x39c>)
 8001638:	f000 fe3f 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <display_2+0x39c>)
 8001644:	f000 fe39 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 8001648:	e02d      	b.n	80016a6 <display_2+0x3a2>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <display_2+0x39c>)
 8001652:	f000 fe32 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <display_2+0x39c>)
 800165e:	f000 fe2c 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <display_2+0x39c>)
 800166a:	f000 fe26 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <display_2+0x39c>)
 8001676:	f000 fe20 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <display_2+0x39c>)
 8001682:	f000 fe1a 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <display_2+0x39c>)
 800168e:	f000 fe14 	bl	80022ba <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001698:	4801      	ldr	r0, [pc, #4]	; (80016a0 <display_2+0x39c>)
 800169a:	f000 fe0e 	bl	80022ba <HAL_GPIO_WritePin>
				  break;
 800169e:	e002      	b.n	80016a6 <display_2+0x3a2>
 80016a0:	40010c00 	.word	0x40010c00
		default:
				  break;
 80016a4:	bf00      	nop
	}
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b4:	f000 fafe 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 f814 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f000 f89a 	bl	80017f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016c0:	f000 f84c 	bl	800175c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <main+0x2c>)
 80016c6:	f001 fa57 	bl	8002b78 <HAL_TIM_Base_Start_IT>
//  int led7_freq2 = 0;




  status = INIT;
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <main+0x30>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  fsm_automatic_Run();
 80016d0:	f7fe fdf6 	bl	80002c0 <fsm_automatic_Run>
	  fsm_manual_Run();
 80016d4:	f7ff f990 	bl	80009f8 <fsm_manual_Run>
	  fsm_automatic_Run();
 80016d8:	e7fa      	b.n	80016d0 <main+0x20>
 80016da:	bf00      	nop
 80016dc:	200000ac 	.word	0x200000ac
 80016e0:	200000a8 	.word	0x200000a8

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b090      	sub	sp, #64	; 0x40
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2228      	movs	r2, #40	; 0x28
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fdcc 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170a:	2301      	movs	r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170e:	2310      	movs	r3, #16
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fdfe 	bl	800231c <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001726:	f000 f8d5 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f86c 	bl	8002820 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800174e:	f000 f8c1 	bl	80018d4 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3740      	adds	r7, #64	; 0x40
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_TIM2_Init+0x94>)
 800177a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001782:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_TIM2_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001790:	2209      	movs	r2, #9
 8001792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_TIM2_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_TIM2_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017a2:	f001 f999 	bl	8002ad8 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017ac:	f000 f892 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017be:	f001 fb17 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017c8:	f000 f884 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM2_Init+0x94>)
 80017da:	f001 fcef 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017e4:	f000 f876 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200000ac 	.word	0x200000ac

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <MX_GPIO_Init+0xbc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <MX_GPIO_Init+0xbc>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <MX_GPIO_Init+0xbc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_GPIO_Init+0xbc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <MX_GPIO_Init+0xbc>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_GPIO_Init+0xbc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 8001838:	2200      	movs	r2, #0
 800183a:	f640 71fe 	movw	r1, #4094	; 0xffe
 800183e:	481d      	ldr	r0, [pc, #116]	; (80018b4 <MX_GPIO_Init+0xc0>)
 8001840:	f000 fd3b 	bl	80022ba <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 8001844:	2200      	movs	r2, #0
 8001846:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800184a:	481b      	ldr	r0, [pc, #108]	; (80018b8 <MX_GPIO_Init+0xc4>)
 800184c:	f000 fd35 	bl	80022ba <HAL_GPIO_WritePin>
                          |SEG6_Pin|SEG10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_TEST_Pin GREEN_1_Pin YELLOW_1_Pin RED_1_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 8001850:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001854:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2302      	movs	r3, #2
 8001860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4619      	mov	r1, r3
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_GPIO_Init+0xc0>)
 800186a:	f000 fb93 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG11_Pin SEG12_Pin SEG13_Pin
                           SEG14_Pin SEG15_Pin SEG16_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 800186e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001872:	60bb      	str	r3, [r7, #8]
                          |SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2302      	movs	r3, #2
 800187e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_GPIO_Init+0xc4>)
 8001888:	f000 fb84 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800188c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	4619      	mov	r1, r3
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_GPIO_Init+0xc0>)
 80018a2:	f000 fb77 	bl	8001f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40010c00 	.word	0x40010c00

080018bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  timerRun();
 80018c4:	f000 f848 	bl	8001958 <timerRun>
  getKeyInput();
 80018c8:	f7fe fc50 	bl	800016c <getKeyInput>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <setTimer_1s1>:
int timer_EN_GR1_flag = 1;
int timer_2hz_counter = 0;
int timer_2hz_flag = 1;

void setTimer_1s1(int duration)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	timer1_1s_counter = duration;
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <setTimer_1s1+0x20>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
	timer1_1s_flag = 0;
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <setTimer_1s1+0x24>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000003c 	.word	0x2000003c
 8001904:	200000f4 	.word	0x200000f4

08001908 <setTimer_EN_GR1>:
void setTimer_EN_GR1(int duration)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	timer_EN_GR1_counter = duration;
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <setTimer_EN_GR1+0x20>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
	timer_EN_GR1_flag = 0;
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <setTimer_EN_GR1+0x24>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200000f8 	.word	0x200000f8
 800192c:	20000040 	.word	0x20000040

08001930 <setTimer_2hz>:
void setTimer_2hz(int duration)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	timer_2hz_counter = duration;
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <setTimer_2hz+0x20>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
	timer_2hz_flag = 0;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <setTimer_2hz+0x24>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	200000fc 	.word	0x200000fc
 8001954:	20000044 	.word	0x20000044

08001958 <timerRun>:
void timerRun()
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	if(timer1_1s_counter > 0)
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <timerRun+0x6c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	dd0b      	ble.n	800197c <timerRun+0x24>
	{
		timer1_1s_counter--;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <timerRun+0x6c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <timerRun+0x6c>)
 800196c:	6013      	str	r3, [r2, #0]
		if(timer1_1s_counter <= 0)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <timerRun+0x6c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	dc02      	bgt.n	800197c <timerRun+0x24>
		{
			timer1_1s_flag = 1;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <timerRun+0x70>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_EN_GR1_counter > 0)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <timerRun+0x74>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd0b      	ble.n	800199c <timerRun+0x44>
	{
		timer_EN_GR1_counter--;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <timerRun+0x74>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <timerRun+0x74>)
 800198c:	6013      	str	r3, [r2, #0]
		if(timer_EN_GR1_counter <= 0)
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <timerRun+0x74>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dc02      	bgt.n	800199c <timerRun+0x44>
		{
			timer_EN_GR1_flag = 1;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <timerRun+0x78>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_2hz_counter > 0)
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <timerRun+0x7c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dd0b      	ble.n	80019bc <timerRun+0x64>
	{
		timer_2hz_counter--;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <timerRun+0x7c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <timerRun+0x7c>)
 80019ac:	6013      	str	r3, [r2, #0]
		if(timer_2hz_counter <= 0)
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <timerRun+0x7c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dc02      	bgt.n	80019bc <timerRun+0x64>
		{
			timer_2hz_flag = 1;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <timerRun+0x80>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	2000003c 	.word	0x2000003c
 80019c8:	200000f4 	.word	0x200000f4
 80019cc:	200000f8 	.word	0x200000f8
 80019d0:	20000040 	.word	0x20000040
 80019d4:	200000fc 	.word	0x200000fc
 80019d8:	20000044 	.word	0x20000044

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_MspInit+0x5c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_MspInit+0x5c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_MspInit+0x60>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_MspInit+0x60>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d113      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x44>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 fa59 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fa72 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f937 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM2_IRQHandler+0x10>)
 8001ade:	f001 f897 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000ac 	.word	0x200000ac

08001aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <light_1>:
 */

#include "traffic_light.h"

void light_1(enum led color)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d84b      	bhi.n	8001ba0 <light_1+0xa8>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <light_1+0x18>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b41 	.word	0x08001b41
 8001b18:	08001b61 	.word	0x08001b61
 8001b1c:	08001b81 	.word	0x08001b81
		case red:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2110      	movs	r1, #16
 8001b24:	4821      	ldr	r0, [pc, #132]	; (8001bac <light_1+0xb4>)
 8001b26:	f000 fbc8 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	481f      	ldr	r0, [pc, #124]	; (8001bac <light_1+0xb4>)
 8001b30:	f000 fbc3 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2108      	movs	r1, #8
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <light_1+0xb4>)
 8001b3a:	f000 fbbe 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001b3e:	e030      	b.n	8001ba2 <light_1+0xaa>
		case green:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2110      	movs	r1, #16
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <light_1+0xb4>)
 8001b46:	f000 fbb8 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	4817      	ldr	r0, [pc, #92]	; (8001bac <light_1+0xb4>)
 8001b50:	f000 fbb3 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2108      	movs	r1, #8
 8001b58:	4814      	ldr	r0, [pc, #80]	; (8001bac <light_1+0xb4>)
 8001b5a:	f000 fbae 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001b5e:	e020      	b.n	8001ba2 <light_1+0xaa>
		case yellow:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2110      	movs	r1, #16
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <light_1+0xb4>)
 8001b66:	f000 fba8 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <light_1+0xb4>)
 8001b70:	f000 fba3 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2108      	movs	r1, #8
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <light_1+0xb4>)
 8001b7a:	f000 fb9e 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001b7e:	e010      	b.n	8001ba2 <light_1+0xaa>
		case black:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2110      	movs	r1, #16
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <light_1+0xb4>)
 8001b86:	f000 fb98 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <light_1+0xb4>)
 8001b90:	f000 fb93 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2108      	movs	r1, #8
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <light_1+0xb4>)
 8001b9a:	f000 fb8e 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001b9e:	e000      	b.n	8001ba2 <light_1+0xaa>
		default:
			break;
 8001ba0:	bf00      	nop
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40010800 	.word	0x40010800

08001bb0 <light_2>:
void light_2(enum led color)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d84b      	bhi.n	8001c58 <light_2+0xa8>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <light_2+0x18>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001bf9 	.word	0x08001bf9
 8001bd0:	08001c19 	.word	0x08001c19
 8001bd4:	08001c39 	.word	0x08001c39
		case red:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	4821      	ldr	r0, [pc, #132]	; (8001c64 <light_2+0xb4>)
 8001bde:	f000 fb6c 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2120      	movs	r1, #32
 8001be6:	481f      	ldr	r0, [pc, #124]	; (8001c64 <light_2+0xb4>)
 8001be8:	f000 fb67 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	481c      	ldr	r0, [pc, #112]	; (8001c64 <light_2+0xb4>)
 8001bf2:	f000 fb62 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001bf6:	e030      	b.n	8001c5a <light_2+0xaa>
		case green:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	4819      	ldr	r0, [pc, #100]	; (8001c64 <light_2+0xb4>)
 8001bfe:	f000 fb5c 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2120      	movs	r1, #32
 8001c06:	4817      	ldr	r0, [pc, #92]	; (8001c64 <light_2+0xb4>)
 8001c08:	f000 fb57 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	4814      	ldr	r0, [pc, #80]	; (8001c64 <light_2+0xb4>)
 8001c12:	f000 fb52 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001c16:	e020      	b.n	8001c5a <light_2+0xaa>
		case yellow:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <light_2+0xb4>)
 8001c1e:	f000 fb4c 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	2120      	movs	r1, #32
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <light_2+0xb4>)
 8001c28:	f000 fb47 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2140      	movs	r1, #64	; 0x40
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <light_2+0xb4>)
 8001c32:	f000 fb42 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001c36:	e010      	b.n	8001c5a <light_2+0xaa>
		case black:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <light_2+0xb4>)
 8001c3e:	f000 fb3c 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2104      	movs	r1, #4
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <light_2+0xb4>)
 8001c48:	f000 fb37 	bl	80022ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2108      	movs	r1, #8
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <light_2+0xb4>)
 8001c52:	f000 fb32 	bl	80022ba <HAL_GPIO_WritePin>
			break;
 8001c56:	e000      	b.n	8001c5a <light_2+0xaa>
		default:
			break;
 8001c58:	bf00      	nop
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40010800 	.word	0x40010800

08001c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c68:	f7ff ff40 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c6e:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c84:	4c09      	ldr	r4, [pc, #36]	; (8001cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c92:	f001 fb05 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c96:	f7ff fd0b 	bl	80016b0 <main>
  bx lr
 8001c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001ca4:	0800332c 	.word	0x0800332c
  ldr r2, =_sbss
 8001ca8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001cac:	20000104 	.word	0x20000104

08001cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_2_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x28>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x28>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f923 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fe84 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f93b 	bl	8001f7a <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f903 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000048 	.word	0x20000048
 8001d38:	20000050 	.word	0x20000050
 8001d3c:	2000004c 	.word	0x2000004c

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_IncTick+0x20>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000050 	.word	0x20000050
 8001d60:	20000100 	.word	0x20000100

08001d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000100 	.word	0x20000100

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <__NVIC_EnableIRQ+0x34>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff90 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff2d 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff42 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff90 	bl	8001e68 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5f 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff35 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffa2 	bl	8001ecc <SysTick_Config>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e161      	b.n	800226c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8150 	bne.w	8002266 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a97      	ldr	r2, [pc, #604]	; (8002228 <HAL_GPIO_Init+0x294>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d05e      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8001fd0:	4a95      	ldr	r2, [pc, #596]	; (8002228 <HAL_GPIO_Init+0x294>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d875      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 8001fd6:	4a95      	ldr	r2, [pc, #596]	; (800222c <HAL_GPIO_Init+0x298>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d058      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8001fdc:	4a93      	ldr	r2, [pc, #588]	; (800222c <HAL_GPIO_Init+0x298>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d86f      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 8001fe2:	4a93      	ldr	r2, [pc, #588]	; (8002230 <HAL_GPIO_Init+0x29c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d052      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8001fe8:	4a91      	ldr	r2, [pc, #580]	; (8002230 <HAL_GPIO_Init+0x29c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d869      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 8001fee:	4a91      	ldr	r2, [pc, #580]	; (8002234 <HAL_GPIO_Init+0x2a0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04c      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8001ff4:	4a8f      	ldr	r2, [pc, #572]	; (8002234 <HAL_GPIO_Init+0x2a0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d863      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 8001ffa:	4a8f      	ldr	r2, [pc, #572]	; (8002238 <HAL_GPIO_Init+0x2a4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d046      	beq.n	800208e <HAL_GPIO_Init+0xfa>
 8002000:	4a8d      	ldr	r2, [pc, #564]	; (8002238 <HAL_GPIO_Init+0x2a4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d85d      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 8002006:	2b12      	cmp	r3, #18
 8002008:	d82a      	bhi.n	8002060 <HAL_GPIO_Init+0xcc>
 800200a:	2b12      	cmp	r3, #18
 800200c:	d859      	bhi.n	80020c2 <HAL_GPIO_Init+0x12e>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <HAL_GPIO_Init+0x80>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	0800208f 	.word	0x0800208f
 8002018:	08002069 	.word	0x08002069
 800201c:	0800207b 	.word	0x0800207b
 8002020:	080020bd 	.word	0x080020bd
 8002024:	080020c3 	.word	0x080020c3
 8002028:	080020c3 	.word	0x080020c3
 800202c:	080020c3 	.word	0x080020c3
 8002030:	080020c3 	.word	0x080020c3
 8002034:	080020c3 	.word	0x080020c3
 8002038:	080020c3 	.word	0x080020c3
 800203c:	080020c3 	.word	0x080020c3
 8002040:	080020c3 	.word	0x080020c3
 8002044:	080020c3 	.word	0x080020c3
 8002048:	080020c3 	.word	0x080020c3
 800204c:	080020c3 	.word	0x080020c3
 8002050:	080020c3 	.word	0x080020c3
 8002054:	080020c3 	.word	0x080020c3
 8002058:	08002071 	.word	0x08002071
 800205c:	08002085 	.word	0x08002085
 8002060:	4a76      	ldr	r2, [pc, #472]	; (800223c <HAL_GPIO_Init+0x2a8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002066:	e02c      	b.n	80020c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e029      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	3304      	adds	r3, #4
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e024      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	3308      	adds	r3, #8
 8002080:	623b      	str	r3, [r7, #32]
          break;
 8002082:	e01f      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	330c      	adds	r3, #12
 800208a:	623b      	str	r3, [r7, #32]
          break;
 800208c:	e01a      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002096:	2304      	movs	r3, #4
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e013      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a4:	2308      	movs	r3, #8
 80020a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	611a      	str	r2, [r3, #16]
          break;
 80020ae:	e009      	b.n	80020c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b0:	2308      	movs	r3, #8
 80020b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	615a      	str	r2, [r3, #20]
          break;
 80020ba:	e003      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x130>
          break;
 80020c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d801      	bhi.n	80020ce <HAL_GPIO_Init+0x13a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	e001      	b.n	80020d2 <HAL_GPIO_Init+0x13e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2bff      	cmp	r3, #255	; 0xff
 80020d8:	d802      	bhi.n	80020e0 <HAL_GPIO_Init+0x14c>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_Init+0x152>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3b08      	subs	r3, #8
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	210f      	movs	r1, #15
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	401a      	ands	r2, r3
 80020f8:	6a39      	ldr	r1, [r7, #32]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	431a      	orrs	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80a9 	beq.w	8002266 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_GPIO_Init+0x2ac>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a49      	ldr	r2, [pc, #292]	; (8002240 <HAL_GPIO_Init+0x2ac>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_GPIO_Init+0x2ac>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800212c:	4a45      	ldr	r2, [pc, #276]	; (8002244 <HAL_GPIO_Init+0x2b0>)
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <HAL_GPIO_Init+0x2b4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1e0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_GPIO_Init+0x2b8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1dc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <HAL_GPIO_Init+0x2bc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1d8>
 8002168:	2302      	movs	r3, #2
 800216a:	e004      	b.n	8002176 <HAL_GPIO_Init+0x1e2>
 800216c:	2303      	movs	r3, #3
 800216e:	e002      	b.n	8002176 <HAL_GPIO_Init+0x1e2>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <HAL_GPIO_Init+0x1e2>
 8002174:	2300      	movs	r3, #0
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	f002 0203 	and.w	r2, r2, #3
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	4093      	lsls	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002186:	492f      	ldr	r1, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x2b0>)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	492b      	ldr	r1, [pc, #172]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4921      	ldr	r1, [pc, #132]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	491d      	ldr	r1, [pc, #116]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4917      	ldr	r1, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	4913      	ldr	r1, [pc, #76]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 8002208:	4013      	ands	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01f      	beq.n	8002258 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	490d      	ldr	r1, [pc, #52]	; (8002254 <HAL_GPIO_Init+0x2c0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e01f      	b.n	8002266 <HAL_GPIO_Init+0x2d2>
 8002226:	bf00      	nop
 8002228:	10320000 	.word	0x10320000
 800222c:	10310000 	.word	0x10310000
 8002230:	10220000 	.word	0x10220000
 8002234:	10210000 	.word	0x10210000
 8002238:	10120000 	.word	0x10120000
 800223c:	10110000 	.word	0x10110000
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	40010800 	.word	0x40010800
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40011000 	.word	0x40011000
 8002254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_GPIO_Init+0x2f4>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	43db      	mvns	r3, r3
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <HAL_GPIO_Init+0x2f4>)
 8002262:	4013      	ands	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f47f ae96 	bne.w	8001fa8 <HAL_GPIO_Init+0x14>
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	372c      	adds	r7, #44	; 0x2c
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
 80022c6:	4613      	mov	r3, r2
 80022c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ca:	787b      	ldrb	r3, [r7, #1]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d6:	e003      	b.n	80022e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43d9      	mvns	r1, r3
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	400b      	ands	r3, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e272      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800233c:	4b92      	ldr	r3, [pc, #584]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00c      	beq.n	8002362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d112      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
 8002354:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06c      	beq.n	8002448 <HAL_RCC_OscConfig+0x12c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d168      	bne.n	8002448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e24c      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x76>
 8002384:	4b80      	ldr	r3, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7f      	ldr	r2, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0xbc>
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a71      	ldr	r2, [pc, #452]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a67      	ldr	r2, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fcb4 	bl	8001d64 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fcb0 	bl	8001d64 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e200      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xe4>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fca0 	bl	8001d64 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fc9c 	bl	8001d64 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1ec      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x10c>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1c0      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4939      	ldr	r1, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff fc55 	bl	8001d64 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff fc51 	bl	8001d64 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1a1      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4927      	ldr	r1, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fc34 	bl	8001d64 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff fc30 	bl	8001d64 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e180      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03a      	beq.n	80025a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7ff fc14 	bl	8001d64 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff fc10 	bl	8001d64 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e160      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800255e:	2001      	movs	r0, #1
 8002560:	f000 fa9c 	bl	8002a9c <RCC_Delay>
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff fbfa 	bl	8001d64 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002572:	e00f      	b.n	8002594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff fbf6 	bl	8001d64 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d908      	bls.n	8002594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e146      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	42420000 	.word	0x42420000
 8002590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e9      	bne.n	8002574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a6 	beq.w	80026fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a87      	ldr	r2, [pc, #540]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7e      	ldr	r2, [pc, #504]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7ff fbb7 	bl	8001d64 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7ff fbb3 	bl	8001d64 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e103      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x312>
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a6e      	ldr	r2, [pc, #440]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e02d      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x334>
 8002636:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	e01c      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x356>
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a60      	ldr	r2, [pc, #384]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a5d      	ldr	r2, [pc, #372]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a5a      	ldr	r2, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d015      	beq.n	80026be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff fb67 	bl	8001d64 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7ff fb63 	bl	8001d64 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0b1      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <HAL_RCC_OscConfig+0x37e>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7ff fb51 	bl	8001d64 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff fb4d 	bl	8001d64 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e09b      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002704:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d061      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fb21 	bl	8001d64 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff fb1d 	bl	8001d64 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e06d      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d108      	bne.n	8002760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4921      	ldr	r1, [pc, #132]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a19      	ldr	r1, [r3, #32]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	430b      	orrs	r3, r1
 8002772:	491b      	ldr	r1, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7ff faf1 	bl	8001d64 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7ff faed 	bl	8001d64 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e03d      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x46a>
 80027a4:	e035      	b.n	8002812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff fada 	bl	8001d64 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7ff fad6 	bl	8001d64 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e026      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x498>
 80027d2:	e01e      	b.n	8002812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e019      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x500>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0d0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800289e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d040      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e073      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4936      	ldr	r1, [pc, #216]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7ff fa28 	bl	8001d64 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7ff fa24 	bl	8001d64 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e053      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d210      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4922      	ldr	r1, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1cc>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f986 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08003300 	.word	0x08003300
 80029ec:	20000048 	.word	0x20000048
 80029f0:	2000004c 	.word	0x2000004c

080029f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x30>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x36>
 8002a22:	e027      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a26:	613b      	str	r3, [r7, #16]
      break;
 8002a28:	e027      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0c5b      	lsrs	r3, r3, #17
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	fb03 f202 	mul.w	r2, r3, r2
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e004      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	613b      	str	r3, [r7, #16]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	693b      	ldr	r3, [r7, #16]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	007a1200 	.word	0x007a1200
 8002a90:	08003310 	.word	0x08003310
 8002a94:	08003320 	.word	0x08003320
 8002a98:	003d0900 	.word	0x003d0900

08002a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <RCC_Delay+0x34>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <RCC_Delay+0x38>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0a5b      	lsrs	r3, r3, #9
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab8:	bf00      	nop
  }
  while (Delay --);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	60fa      	str	r2, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <RCC_Delay+0x1c>
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000048 	.word	0x20000048
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe ff9e 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fa56 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d001      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e035      	b.n	8002bfc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_Base_Start_IT+0x90>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIM_Base_Start_IT+0x94>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d111      	bne.n	8002bea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d010      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d020      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0202 	mvn.w	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f998 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f98b 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f99a 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d020      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01b      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f972 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f965 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f974 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d020      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f94c 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f93f 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f94e 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0210 	mvn.w	r2, #16
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f926 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f919 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f928 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe fda0 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa6f 	bl	800327e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8f8 	bl	8002fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa42 	bl	800326c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0b4      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d03e      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	f200 8087 	bhi.w	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x172>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d87f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d01a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xa6>
 8002e60:	2b70      	cmp	r3, #112	; 0x70
 8002e62:	d87b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d050      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x11a>
 8002e68:	2b60      	cmp	r3, #96	; 0x60
 8002e6a:	d877      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b50      	cmp	r3, #80	; 0x50
 8002e6e:	d03c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e70:	2b50      	cmp	r3, #80	; 0x50
 8002e72:	d873      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d058      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x13a>
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d86f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b30      	cmp	r3, #48	; 0x30
 8002e7e:	d064      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e80:	2b30      	cmp	r3, #48	; 0x30
 8002e82:	d86b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d060      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d867      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d05a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	e062      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea6:	f000 f96a 	bl	800317e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
      break;
 8002ec2:	e04f      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed4:	f000 f953 	bl	800317e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee6:	609a      	str	r2, [r3, #8]
      break;
 8002ee8:	e03c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f8ca 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2150      	movs	r1, #80	; 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f921 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f08:	e02c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 f8e8 	bl	80030ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2160      	movs	r1, #96	; 0x60
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f911 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f28:	e01c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f8aa 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2140      	movs	r1, #64	; 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f901 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 f8f8 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <TIM_Base_SetConfig+0xc0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x28>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x28>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <TIM_Base_SetConfig+0xc4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a20      	ldr	r2, [pc, #128]	; (8003088 <TIM_Base_SetConfig+0xc0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x52>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x52>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <TIM_Base_SetConfig+0xc4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <TIM_Base_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]
  }
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400

08003090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 030a 	bic.w	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0210 	bic.w	r2, r3, #16
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003128:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 0307 	orr.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e041      	b.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d004      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10c      	bne.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400

0800326c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <memset>:
 8003290:	4603      	mov	r3, r0
 8003292:	4402      	add	r2, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2600      	movs	r6, #0
 80032a4:	4d0c      	ldr	r5, [pc, #48]	; (80032d8 <__libc_init_array+0x38>)
 80032a6:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	f000 f81a 	bl	80032e8 <_init>
 80032b4:	2600      	movs	r6, #0
 80032b6:	4d0a      	ldr	r5, [pc, #40]	; (80032e0 <__libc_init_array+0x40>)
 80032b8:	4c0a      	ldr	r4, [pc, #40]	; (80032e4 <__libc_init_array+0x44>)
 80032ba:	1b64      	subs	r4, r4, r5
 80032bc:	10a4      	asrs	r4, r4, #2
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003324 	.word	0x08003324
 80032dc:	08003324 	.word	0x08003324
 80032e0:	08003324 	.word	0x08003324
 80032e4:	08003328 	.word	0x08003328

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
